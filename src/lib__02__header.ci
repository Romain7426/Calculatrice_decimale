
#ifndef alloca
#if 0
#define alloca(bytesize_) { size_t bytesize = (bytesize_); char a[bytesize]; &a } 
// Because stack-allocated space is deallocated when the current function returns. 
// The difficulty here that this expression is a GCC construct and is not portable. 
#else 
#define alloca __builtin_alloca 
#endif 
#endif 


#ifdef stderr 
static FILE * stderr_FILE = stderr; 
//#undef stderr 
#endif 
#ifdef stdin
static FILE * stdin_FILE = stdin; 
//#undef stdin 
#endif 
#ifdef stdout 
static FILE * stdout_FILE = stdout; 
//#undef stdout 
#endif 


#ifndef abs 
# define abs(a) (((a)>0)?(a):(-(a)))
#endif 
#ifndef ABS 
# define ABS abs
#endif

//#if defined(BSD)  
#if defined(__OpenBSD__)  
//extern uint32_t arc4random(void); 
#  define random arc4random 
#endif 

// ((VALUE) <  0) ? LOG2(-(VALUE)) : // RL: Does not work. Seems like there's no recursivity in macros. 
//  ((VALUE) == 0) ? -1 :				
#define LOG2_POS(VALUE)						\
  ((VALUE) <  0) ? -2 :						\
  ((VALUE) == 0) ? ((~0) << ((sizeof((VALUE)) << 3) - 1)) :	\
  ((VALUE) >>  0) == 1 ?  0 :					\
    ((VALUE) >>  1) == 1 ?  1 :					\
    ((VALUE) >>  2) == 1 ?  2 :					\
    ((VALUE) >>  3) == 1 ?  3 :					\
    ((VALUE) >>  4) == 1 ?  4 :					\
    ((VALUE) >>  5) == 1 ?  5 :					\
    ((VALUE) >>  6) == 1 ?  6 :					\
    ((VALUE) >>  7) == 1 ?  7 :					\
    ((VALUE) >>  8) == 1 ?  8 :					\
    ((VALUE) >>  9) == 1 ?  9 :					\
    ((VALUE) >> 10) == 1 ? 10 :					\
    ((VALUE) >> 10) == 1 ? 10 :					\
    ((VALUE) >> 11) == 1 ? 11 :					\
    ((VALUE) >> 12) == 1 ? 12 :					\
    ((VALUE) >> 13) == 1 ? 13 :					\
    ((VALUE) >> 14) == 1 ? 14 :					\
    ((VALUE) >> 15) == 1 ? 15 :					\
    ((VALUE) >> 16) == 1 ? 16 :					\
    ((VALUE) >> 17) == 1 ? 17 :					\
    ((VALUE) >> 18) == 1 ? 18 :					\
    ((VALUE) >> 19) == 1 ? 19 :					\
    ((VALUE) >> 20) == 1 ? 20 :					\
    ((VALUE) >> 21) == 1 ? 21 :					\
    ((VALUE) >> 22) == 1 ? 22 :					\
    ((VALUE) >> 23) == 1 ? 23 :					\
    ((VALUE) >> 24) == 1 ? 24 :					\
    ((VALUE) >> 25) == 1 ? 25 :					\
    ((VALUE) >> 26) == 1 ? 26 :					\
    ((VALUE) >> 27) == 1 ? 27 :					\
    ((VALUE) >> 28) == 1 ? 28 :					\
    ((VALUE) >> 29) == 1 ? 29 :					\
    ((VALUE) >> 30) == 1 ? 30 :					\
    ((VALUE) >> 31) == 1 ? 31 :					\
    ((VALUE) >> 32) == 1 ? 32 :					\
    ((VALUE) >> 33) == 1 ? 33 :					\
    ((VALUE) >> 34) == 1 ? 34 :					\
    ((VALUE) >> 35) == 1 ? 35 :					\
    ((VALUE) >> 36) == 1 ? 36 :					\
    ((VALUE) >> 37) == 1 ? 37 :					\
    ((VALUE) >> 38) == 1 ? 38 :					\
    ((VALUE) >> 39) == 1 ? 39 :					\
    ((VALUE) >> 40) == 1 ? 40 :					\
    ((VALUE) >> 41) == 1 ? 41 :					\
    ((VALUE) >> 42) == 1 ? 42 :					\
    ((VALUE) >> 43) == 1 ? 43 :					\
    ((VALUE) >> 44) == 1 ? 44 :					\
    ((VALUE) >> 45) == 1 ? 45 :					\
    ((VALUE) >> 46) == 1 ? 46 :					\
    ((VALUE) >> 47) == 1 ? 47 :					\
    ((VALUE) >> 48) == 1 ? 48 :					\
    ((VALUE) >> 49) == 1 ? 49 :					\
    ((VALUE) >> 50) == 1 ? 50 :					\
    ((VALUE) >> 51) == 1 ? 51 :					\
    ((VALUE) >> 52) == 1 ? 52 :					\
    ((VALUE) >> 53) == 1 ? 53 :					\
    ((VALUE) >> 54) == 1 ? 54 :					\
    ((VALUE) >> 55) == 1 ? 55 :					\
    ((VALUE) >> 56) == 1 ? 56 :					\
    ((VALUE) >> 57) == 1 ? 57 :					\
    ((VALUE) >> 58) == 1 ? 58 :					\
    ((VALUE) >> 59) == 1 ? 59 :					\
    ((VALUE) >> 60) == 1 ? 60 :					\
    ((VALUE) >> 61) == 1 ? 61 :					\
    ((VALUE) >> 62) == 1 ? 62 :					\
    ((VALUE) >> 63) == 1 ? 63 :					\
    64 
 
#define LOG2(VALUE) ((VALUE) < 0 ? LOG2_POS(-(VALUE)) : LOG2_POS(VALUE)) 


#define LOG2_UINT8_POS UINT8_LOG2_POS 
#define UINT8_LOG2_POS(VALUE)					\
  ((VALUE) == 0) ? ((~0) << ((sizeof((VALUE)) << 3) - 1)) :	\
    ((VALUE) >>  0) == 1 ?  0 :					\
    ((VALUE) >>  1) == 1 ?  1 :					\
    ((VALUE) >>  2) == 1 ?  2 :					\
    ((VALUE) >>  3) == 1 ?  3 :					\
    ((VALUE) >>  4) == 1 ?  4 :					\
    ((VALUE) >>  5) == 1 ?  5 :					\
    ((VALUE) >>  6) == 1 ?  6 :					\
    ((VALUE) >>  7) == 1 ?  7 :					\
    8 

#define LOG2_UINT8 UINT8_LOG2 
//#define UINT8_LOG2(VALUE) ((VALUE) < 0 ? UINT8_LOG2_POS(-(VALUE)) : UINT8_LOG2_POS(VALUE)) 
#define UINT8_LOG2 UINT8_LOG2_POS 



#define UINT8_ONE_THIRD(VALUE) (((VALUE) >> 2) + ((VALUE) >> 4) + ((VALUE) >> 6)) 
#define INT8_ONE_THIRD UINT8_ONE_THIRD
 
#ifdef RAND_MAX
enum { RAND_MAX_HALF = RAND_MAX >> 1 }; 
enum { RAND_MAX_LOG2 = LOG2(RAND_MAX) } ; 
enum { RAND_MAX_1FIELD = (((RAND_MAX >> 1) + 1) == (1 << RAND_MAX_LOG2)) ? RAND_MAX : ((1 << RAND_MAX_LOG2) - 1) } ; 
enum { RAND_MAX_1FIELD_HALF = RAND_MAX_1FIELD >> 1 } ; 
#endif 
 
 
 
