
static uint8_t * decimal__conversion_matrix_from_internal_base_to_printing_base[DECIMAL_BASE_MAX] = { 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL 
}; 

static uint16_t decimal__conversion_matrix_from_internal_base_to_printing_base__len[DECIMAL_BASE_MAX] = { }; 

static uint16_t decimal__conversion_matrix_from_internal_base_to_printing_base__fixed_point_size[DECIMAL_BASE_MAX] = { }; 

// Internally, the representation is 'DECIMAL_DIGITS_SIZE' long. 
// In the printing base, the length gonna be [DECIMAL_DIGITS_SIZE * log(internal) / log(printing) ]. 
// At worst, the printing base is two (not one, as it is not usable for longints), implying that the length is multiplied by log2(internal). 

static void decimal__conversion_matrix_from_internal_base_to_printing_base__vector_scalar_mult(decimal_env_t * decimal_env, const uint8_t printing_base, const uint8_t scalar, const uint8_t vector_len, const uint8_t * vector_src, uint8_t * vector_dst) { 
  
  uint8_t carry_forward = 0; 
  uint8_t index; 
  for (index = 0; index < vector_len; index++) { 
    const uint16_t m1 = vector_src[index]; 
    if (m1 == DECIMAL_EOF_BYTE) goto label__propagate_carry_forward; 
    const uint16_t m2 = printing_base; 
    const uint16_t m3 = m1 * m2 + ((uint16_t) carry_forward); 
    vector_dst[index] = m3 % printing_base; 
    carry_forward     = m3 / printing_base; 
  }; 
  return; 

  assert(false); 

 label__propagate_carry_forward: { 
    for (; index < vector_len; index++) { 
      if (0 == carry_forward) break; 
      vector_dst[index] = carry_forward % printing_base; 
      carry_forward     = carry_forward / printing_base; 
    }; 
    return; 
  }; 

  assert(false); 
}; 

static void decimal__conversion_matrix_from_internal_base_to_printing_base__vector_scalar_div(decimal_env_t * decimal_env, const uint8_t printing_base, const uint8_t scalar, const uint8_t vector_len_given, const uint8_t * vector_src, uint8_t * vector_dst) { 

#if 1 
  { 
    dputs_array(STDERR_FILENO, "vector_src{", int_string__stack(vector_len_given), "} = ["); 
    for (uint8_t j = 0; j < vector_len_given; j++) { 
      dputs_array(STDERR_FILENO, int_string__stack(vector_src[j]), ", "); 
    }; 
    dputs_array(STDERR_FILENO, "]" "\n"); 
  }; 
#endif 
  
  uint8_t vector_len = vector_len_given; 
  // Skip meaningless digits. 
  for(;;) { 
    if (0 == vector_len) goto label__vector_src_is_zero; 
    vector_len--; 
    const uint8_t digit = vector_src[vector_len]; 
    if (digit == DECIMAL_EOF_BYTE) continue; 
    if (digit == 0) continue; 
    vector_len++; 
    break; 
  }; 

  dputs_array(STDERR_FILENO, "vector_len = ", int_string__stack(vector_len), "\n"); 
  
  bzero(vector_dst + vector_len, vector_len_given - vector_len); 
  
  uint8_t carry_backward = 0; 
  uint8_t vector_i = vector_len - 1; 
    
  for (;;) { 
    dputs_array(STDERR_FILENO, "carry_backward = ", int_string__stack(carry_backward), "\n"); 
    const uint8_t digit = *(vector_src + vector_i); 
    if (digit == DECIMAL_EOF_BYTE) goto label__propagate_carry_backward; 
    const uint16_t actual_digit = (((uint16_t) carry_backward) * ((uint16_t) printing_base)) + ((uint16_t) digit); 
    *(vector_dst + vector_i) = actual_digit / scalar; 
    carry_backward           = actual_digit % scalar; 
    if (0 == vector_i) { break; }; 
    vector_i--; 
  }; 
  return; 

  assert(false); 

 label__vector_src_is_zero: { 
    bcopy(vector_src, vector_dst, sizeof(uint8_t) * vector_len_given); 
    return; 
  }; 

  assert(false); 

 label__propagate_carry_backward: { 
    for (;;) { 
      dputs_array(STDERR_FILENO, "carry_backward = ", int_string__stack(carry_backward), "\n"); 
      if (0 == carry_backward) break; 
      const uint16_t actual_digit = (((uint16_t) carry_backward) * ((uint16_t) printing_base)); 
      *(vector_dst + vector_i) = actual_digit / scalar; 
      carry_backward           = actual_digit % scalar; 
      if (0 == vector_i) { break; }; 
      vector_i--; 
    }; 
    return; 
  };   

  assert(false); 
}; 



static void decimal__conversion_matrix_from_internal_base_to_printing_base__compute(decimal_env_t * decimal_env, const uint8_t printing_base) { 
  assert(printing_base >= 2); 
  assert(printing_base <= DECIMAL_BASE_MAX); 
  
  uint8_t * matrix = decimal__conversion_matrix_from_internal_base_to_printing_base[printing_base]; 
  if (NULL != matrix) return; 
  
  static const uint8_t decimal_base__log2 = LOG2_OF_DECIMAL_BASE; 
  //const uint8_t printing_base__log2 = GET_LOG2_VALUE_AS_MACRO(printing_base); 
  //const uint8_t printing_base__log2 = GET_LOG2_VALUE_AS_ENUM(printing_base); 
  //const uint8_t printing_base__log2 = LOG2_POS(printing_base); 
  const uint8_t printing_base__log2 = UINT8_LOG2(printing_base); 
  const uint8_t ratio0 = (1 + decimal_base__log2) / printing_base__log2; 
  const uint8_t ratio = (0 == ratio0) ? 1 : ratio0; 
  const uint16_t fixed_point_size = ((uint16_t) ratio) * ((uint16_t) DECIMAL_FIXED_POINT_SIZE); 
  const uint16_t int_size         = ((uint16_t) ratio) * ((uint16_t) DECIMAL_INT_SIZE); 
  const uint16_t len = int_size + fixed_point_size; 
  decimal__conversion_matrix_from_internal_base_to_printing_base__len[printing_base] = len; 
  
  const uint32_t matrix_bytesize = sizeof(uint8_t) * len * DECIMAL_DIGITS_SIZE; 
  matrix = (uint8_t *) malloc(matrix_bytesize); 
  assert(matrix != NULL); 
  
  decimal__conversion_matrix_from_internal_base_to_printing_base[printing_base] = matrix; 
  
  
  // INTEGER PART 
  //bzero(matrix, matrix_bytesize); 
  memset(matrix, DECIMAL_EOF_BYTE, matrix_bytesize); 
#if 1 
  matrix[DECIMAL_FIXED_POINT_SIZE * DECIMAL_DIGITS_SIZE + fixed_point_size] = 1; 
#else 
  matrix[DECIMAL_FIXED_POINT_SIZE][fixed_point_size] = 1; 
#endif 
  for (uint8_t vector_i = DECIMAL_FIXED_POINT_SIZE + 1; vector_i < DECIMAL_DIGITS_SIZE; vector_i++) { 
    const uint16_t   current_vector_i = vector_i * DECIMAL_DIGITS_SIZE + fixed_point_size; 
    const uint16_t  previous_vector_i = current_vector_i - DECIMAL_DIGITS_SIZE; 
    uint8_t       *  current_vector = &(matrix[ current_vector_i]); 
    const uint8_t * previous_vector = &(matrix[previous_vector_i]); 
    decimal__conversion_matrix_from_internal_base_to_printing_base__vector_scalar_mult(decimal_env, printing_base, DECIMAL_BASE, int_size, previous_vector, current_vector); 
  }; 

  // FLOAT PART 
  for (uint8_t vector_i = 0; vector_i < DECIMAL_FIXED_POINT_SIZE; vector_i++) { 
    const uint16_t   current_vector_i = (DECIMAL_FIXED_POINT_SIZE_MINUS1 - vector_i) * DECIMAL_DIGITS_SIZE; 
    const uint16_t  previous_vector_i = current_vector_i + DECIMAL_DIGITS_SIZE; 
    uint8_t       *  current_vector   = &(matrix[ current_vector_i]); 
    const uint8_t * previous_vector   = &(matrix[previous_vector_i]); 
    decimal__conversion_matrix_from_internal_base_to_printing_base__vector_scalar_div(decimal_env, printing_base, DECIMAL_BASE, fixed_point_size + 1, previous_vector, current_vector); 
  }; 


#if 1 
  { 
    dputs_array(STDERR_FILENO, "------------------------------------------------------------------------------" "\n"); 
    for (uint8_t i = 0; i < DECIMAL_DIGITS_SIZE; i++) { 
      if (len <= UINT8_MAX) { 
	dputs_array(STDERR_FILENO, "vector[", decimal__print_raw__digits[i], "]{", decimal__print_raw__digits[len], "} = ["); 
      } 
      else {  
	dputs_array(STDERR_FILENO, "vector[", int_string__stack(i), "]{", int_string__stack(len), "} = ["); 
      }; 
      for (uint16_t j = 0; j < len; j++) { 
	const uint16_t matrix_index = i * DECIMAL_DIGITS_SIZE + j; 
	const uint8_t  matrix_digit = matrix[matrix_index]; 
#if 1 
	dputs_array(STDERR_FILENO, *(decimal__print_raw__digits + matrix_digit), ", "); 
#else 
	dputs_array(STDERR_FILENO, int_string__stack(matrix_digit), ", "); 
#endif 
      }; 
      dputs_array(STDERR_FILENO, "]" "\n"); 
    }; 
    dputs_array(STDERR_FILENO, "------------------------------------------------------------------------------" "\n"); 
  }; 
#endif 
  
}; 


