RETURN_TYPE_T decimal__neg_r(decimal_env_t * decimal_env, decimal_t * d_r) { 
  const uint8_t d_status     = (*d_r)[DECIMAL_STATUS_INDEX]; 
  const uint8_t d_status_neg = decimal_status__neg(decimal_env, d_status); 
  (*d_r)[DECIMAL_STATUS_INDEX] = d_status_neg; 
#ifdef RETURN_ERROR 
  return decimal_env -> error_id; 
#else 
  return (0 <= decimal_env -> error_id) ? d_r : NULL; 
#endif 
}; 



RETURN_TYPE_T decimal__sub_r(decimal_env_t * decimal_env, decimal_t * d_r, const decimal_t * e_r) { 
  if ((const void *)d_r == (const void *)e_r) { 
    (*d_r)[DECIMAL_STATUS_INDEX] = DECIMAL_STATUS__ZERO; 
#ifdef RETURN_ERROR 
    return DECIMAL__OK; 
#else 
    return d_r; 
#endif 
  }; 
  decimal__neg_r(decimal_env, d_r); 
  decimal__add_r(decimal_env, d_r, e_r); 
  decimal__neg_r(decimal_env, d_r); 
#ifdef RETURN_ERROR 
    return DECIMAL__OK; 
#else 
    return d_r; 
#endif 
}; 




