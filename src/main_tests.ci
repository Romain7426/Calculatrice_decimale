



static int_decimal_error_t main_tests(const int stdlog_d, const int stddata_d, const int stduser_d, const int stdprint_d) { 
  int_decimal_error_t error_id; 
  error_id = DECIMAL__OK; 

  uint8_t decimal_env__buffer[DECIMAL_ENV__SIZEOF]; 
  decimal_env_t * decimal_env; 
  decimal_env = decimal_env__make_b(sizeof(decimal_env__buffer), decimal_env__buffer, NULL, stdlog_d); 
  
  goto label__start; 
  
 label__exit: { 
    if (stdlog_d > 0) { dprintf(stdlog_d, "Exit value = [ %d ] %s " "\n", error_id, int_decimal_error__get_cstr(error_id)); }; 
    return error_id; 
  }; 
  
  assert(false); 


 label__start: {}; 
  
#if 0 
  test_decimal_division__uint16_quad(STDERR_FILENO, decimal_env); 
  goto label__exit; 
  
  test_decimal_division__uint16_diag(STDERR_FILENO, decimal_env); 
  goto label__exit; 
  
  
  test_decimal__unit(STDERR_FILENO, decimal_env, 23, 22); 
  //goto label__exit; 
  test_decimal__unit(STDERR_FILENO, decimal_env, 23, 7); 
  test_decimal__unit(STDERR_FILENO, decimal_env, 512, 1024); 
  test_decimal__unit(STDERR_FILENO, decimal_env, 1, 1024); 
  
  goto label__exit; 
#endif 

  enum { 
    TEST_NULL, 
    TEST_HALT, 
    TEST_ASSIGNMENT, 
    TEST_TILDE, 
    TEST_INC_AND_DEC, 
    TEST_ADDITION, 
    TEST_SUBSTRACTION, 
    TEST_MULTIPLICATION, 
    TEST_INVERSE, 
    TEST_DIVISION, 
    TEST_DIVISION_USING_INVERSE, 
    TEST_DIVISION__BENCHMARK, 
    TEST_DIVISION_USING_INVERSE__BENCHMARK, 
    TEST_COUNT 
  }; 
  
  
  //static const uint8_t steps[] = { TEST_DIVISION_USING_INVERSE__BENCHMARK, TEST_HALT }; 
  static const uint8_t steps[] = { TEST_DIVISION__BENCHMARK, TEST_HALT }; 
  enum { steps_count = ARRAY_SIZE(steps) }; 
  static const uint8_t steps_count__compiled_value = steps_count; 
  
  int8_t step_i; 
  step_i = 0; 
  
  uint8_t step_t; 
  
  step_i --; 
  
 label__next_step: { 
    step_i++; 
    
    step_t = (step_i < 0 || step_i >= steps_count) ? TEST_HALT : steps[step_i]; 
    switch (step_t) { 
    default: assert(false); break; 
    case TEST_NULL: assert(false); break; 
    case TEST_HALT: goto label__halt; 
    case TEST_ASSIGNMENT: goto label__test__assignment; 
    case TEST_TILDE: goto label__test__tilde; 
    case TEST_INC_AND_DEC: goto label__test__inc_and_dec; 
    case TEST_ADDITION: goto label__test__addition; 
    case TEST_SUBSTRACTION: goto label__test__substraction; 
    case TEST_MULTIPLICATION: goto label__test__multiplication; 
    case TEST_INVERSE: goto label__test__inverse; 
    case TEST_DIVISION: goto label__test__division; 
    case TEST_DIVISION_USING_INVERSE: goto label__test__division_using_inverse; 
    case TEST_DIVISION__BENCHMARK: goto label__test__division__benchmark; 
    case TEST_DIVISION_USING_INVERSE__BENCHMARK: goto label__test__division_using_inverse__benchmark; 
    }; 
    assert(false); 
  }; 
    
 label__halt: { 
    write_string_ln(STDOUT_FILENO, "--- HALT ---"); 
    goto label__exit; 
  }; 


  assert(false); 
  
  
 label__test__assignment: { 
    // ADD 
    write_string_ln(STDOUT_FILENO, "--- ASSIGNMENT ---"); 
    
#define TEST_ASSIGNMENT(__int_number_e__) {				\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "e = ");					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " STRINGIFY(__int_number_e__) " ]] "); \
    }; 
    
#define TEST_ASSIGNMENT_SHIFT(__int_number_e__,__shift_right_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__shift_right_by_r(decimal_env, &e, (__shift_right_e__));	\
      write_string(stdprint_d, "e = ");					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
    TEST_ASSIGNMENT(0); 
    TEST_ASSIGNMENT(9); 
    TEST_ASSIGNMENT(7); 

    TEST_ASSIGNMENT_SHIFT(7,0,"7"); 
    TEST_ASSIGNMENT_SHIFT(7,1,"0.07"); 
    TEST_ASSIGNMENT_SHIFT(7,2,"0.0007"); 
    TEST_ASSIGNMENT_SHIFT(7,3,"0.000007"); 
    TEST_ASSIGNMENT_SHIFT(7,4,"0.00000007"); 
    TEST_ASSIGNMENT_SHIFT(7,5,"0.0000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,6,"0.000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,7,"0.00000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,8,"0.0000000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,9,"0.000000000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,10,"0.00000000000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,11,"0.0000000000000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,12,"0.000000000000000000000007"); 
    TEST_ASSIGNMENT_SHIFT(7,13,"0.00000000000000000000000007"); 
    
    TEST_ASSIGNMENT_SHIFT(65537,0,"65537"); 
    TEST_ASSIGNMENT_SHIFT(65537,4,"0.00065537"); 
    TEST_ASSIGNMENT_SHIFT(65537,-3,"65537000000"); 
    TEST_ASSIGNMENT_SHIFT(65537,-255,"+∞"); 
    TEST_ASSIGNMENT_SHIFT(65537,-256,"+∞"); 
    TEST_ASSIGNMENT_SHIFT(65537,256,"+ε"); 
    TEST_ASSIGNMENT_SHIFT(65537,2,"6.5537"); 
    
    TEST_ASSIGNMENT_SHIFT(65537,10,"0.00000000000000065537"); 
    TEST_ASSIGNMENT_SHIFT(65537,1,"655.37"); 
    TEST_ASSIGNMENT_SHIFT(65537,12,"0.000000000000000000065537"); 
    TEST_ASSIGNMENT_SHIFT(65537,13,"0.00000000000000000000065537"); 
    TEST_ASSIGNMENT_SHIFT(65537,255,"+ε"); 
    
    goto label__next_step; 
  }; 
  
  
 label__test__tilde: { 
    // TILDE 
    write_string_ln(STDOUT_FILENO, "--- TILDE (9-complement; one way to simulate substraction) ---"); 
    
#define TEST_TILDE(__int_number_e__,__string_expected_result__) {	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_TILDE_DOUBLE(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "~~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__tilde_r(decimal_env, &e);				\
      write_string(stdprint_d, "~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
    TEST_TILDE_DOUBLE(0,"0"); 
    TEST_TILDE_DOUBLE(42,"42"); 
    TEST_TILDE_DOUBLE(142,"142"); 
    
    goto label__next_step; 
  }; 
  


    
    
 label__test__addition: { 
    // ADD 
    write_string_ln(STDOUT_FILENO, "--- ADDITION ---"); 
    
#define TEST_ADDITION(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " + "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__add_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_ADDITION_ID(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " + "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__add_r(decimal_env, &e, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_ADDITION_SHIFT(__int_number_d__,__shift_right_d__,__int_number_e__,__shift_right_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__shift_right_by_r(decimal_env, &d, (__shift_right_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__shift_right_by_r(decimal_env, &e, (__shift_right_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " + "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__add_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_ADDITION_TILDE(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "~"); decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " + "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__tilde_r(decimal_env, &d);				\
      decimal__add_r(decimal_env, &d, &e);				\
      decimal__tilde_r(decimal_env, &d);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_ADDITION_TILDE_E(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " + "); write_string(stdprint_d, "~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__add_r(decimal_env, &d, &e);				\
      decimal__tilde_r(decimal_env, &d);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
    TEST_ADDITION_ID(0,"0"); 
    TEST_ADDITION_ID(-1025,"-2050"); 
    TEST_ADDITION_ID(1025,"2050"); 

    TEST_ADDITION(0,7,"7"); 
    TEST_ADDITION(1,7,"8"); 
    TEST_ADDITION(2,7,"9"); 
    TEST_ADDITION(3,7,"10"); 
    TEST_ADDITION(4,7,"11"); 
    TEST_ADDITION(7,11,"18"); 

    TEST_ADDITION_SHIFT(4,0,7,1,"4.07");   
    TEST_ADDITION_SHIFT(7,13,1,255,"0.000 000 000 000 000 000 000 000 07 (25 zéros)"); 
    
    TEST_ADDITION_TILDE(142,142,"0"); 
    TEST_ADDITION_TILDE_E(142,142,"0"); 
    
    TEST_ADDITION(142,-3,"139"); 
    TEST_ADDITION(-142,-3,"-145"); 
    TEST_ADDITION(-142,3,"-139"); 
    
    goto label__next_step; 
  }; 



  

 label__test__substraction: { 
    // SUB 
    write_string_ln(STDOUT_FILENO, "--- SUBSTRACTION ---"); 
    
#define TEST_SUBSTRACTION(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " - "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__sub_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_SUBSTRACTION_ID(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " - "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__sub_r(decimal_env, &e, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
    TEST_SUBSTRACTION_ID(-3,"0"); 
    TEST_SUBSTRACTION(142,-3,"145"); 
    TEST_SUBSTRACTION(-142,-3,"-139"); 
    TEST_SUBSTRACTION(-142,3,"-145"); 
    
    goto label__next_step; 
  }; 




 label__test__inc_and_dec: { 
    // INC & DEC 
    write_string_ln(STDOUT_FILENO, "--- INC & DEC ---"); 

#define TEST_INC(__int_number_e__,__string_expected_result__) {		\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, "++ = "); \
      decimal__inc_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_TILDE_THEN_INC(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "(~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, ")++ = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__inc_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_TILDE_THEN_NEG_THEN_INC(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "(-(~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, "))++ = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__neg_r(decimal_env, &e);					\
      decimal__inc_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_DEC(__int_number_e__,__string_expected_result__) {		\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, "-- = "); \
      decimal__dec_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
#define TEST_TILDE_THEN_DEC(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "(~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, ")-- = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__dec_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_TILDE_THEN_NEG_THEN_DEC(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      write_string(stdprint_d, "(-(~"); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, "))-- = "); \
      decimal__tilde_r(decimal_env, &e);				\
      decimal__neg_r(decimal_env, &e);					\
      decimal__dec_r(decimal_env, &e);					\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

    TEST_INC(-142,"-141"); 
    TEST_INC(142,"143"); 
    TEST_INC(0,"1"); 
    TEST_INC(-1,"0"); 
    TEST_INC(1,"2"); 

    TEST_TILDE_THEN_INC(0,"+∞"); 
    
    TEST_TILDE_THEN_NEG_THEN_INC(0,"__DECIMAL_MIN__ + 1"); 

    TEST_DEC(-142,"-143"); 
    TEST_DEC(142,"141"); 
    TEST_DEC(0,"-1"); 
    TEST_DEC(1,"0"); 
    TEST_DEC(-1,"-2"); 
  
    TEST_TILDE_THEN_DEC(0,"__DECIMAL_MAX__ - 1"); 
    
    TEST_TILDE_THEN_NEG_THEN_DEC(0,"-∞"); 

    goto label__next_step; 
  }; 

  
  
  
  
  
  
  
  
  
 label__test__multiplication: { 
    // MULT 
    write_string_ln(STDOUT_FILENO, "--- MULTIPLICATION ---"); 

#define TEST_MULTIPLICATION_ID(__int_number_e__,__string_expected_result__) { \
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " x "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__mult_r(decimal_env, &e, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &e);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_MULTIPLICATION(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " x "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__mult_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_MULTIPLICATION_SHIFT(__int_number_d__,__shift_right_d__,__int_number_e__,__shift_right_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__shift_right_by_r(decimal_env, &d, (__shift_right_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__shift_right_by_r(decimal_env, &e, (__shift_right_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " x "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__mult_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

    TEST_MULTIPLICATION_ID(7,"49"); 
    TEST_MULTIPLICATION(937,2,"1874"); 
    TEST_MULTIPLICATION(1023,1,"1023"); 
    TEST_MULTIPLICATION(6,7,"42"); 
    TEST_MULTIPLICATION(6,-7,"-42"); 
    TEST_MULTIPLICATION(16,7,"112"); 
    TEST_MULTIPLICATION(7,16,"112"); 
    TEST_MULTIPLICATION(-16,7,"-112"); 
    TEST_MULTIPLICATION(7,-16,"-112"); 
    TEST_MULTIPLICATION(7,116,"812"); 
    TEST_MULTIPLICATION_SHIFT(7,0,116,1,"8.12");
    TEST_MULTIPLICATION_SHIFT(7,1,116,1,"0.0812"); 
    TEST_MULTIPLICATION_SHIFT(70,1,116,1,"0.812");
    
    goto label__next_step; 
  }; 
  
  
  
  
  
  
  
  
 label__test__division: { 
    // DIV 
    write_string_ln(STDOUT_FILENO, "--- DIVISION ---"); 
    
#define TEST_DIVISION(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " / "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__div_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_DIVISION_SHIFT(__int_number_d__,__shift_right_d__,__int_number_e__,__shift_right_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__shift_right_by_r(decimal_env, &d, (__shift_right_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__shift_right_by_r(decimal_env, &e, (__shift_right_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " / "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__div_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

    TEST_DIVISION(1,4,"0.25"); 
    TEST_DIVISION(3,3,"1"); 
    TEST_DIVISION(33,3,"11"); 
    TEST_DIVISION(66,3,"22"); 
    TEST_DIVISION(333,3,"111"); 
    TEST_DIVISION(3333,3,"1111"); 
    TEST_DIVISION(33333,3,"11111"); 
    TEST_DIVISION(333333,3,"111111"); 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,3, "i / 3"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,4, "i / 4"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,5, "i / 5"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,6, "i / 6"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,7, "i / 7"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,8, "i / 8"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,9, "i / 9"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,10, "i / 10"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,11, "i / 11"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,12, "i / 12"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION(i,13, "i / 13"); }; 
    TEST_DIVISION_SHIFT(65535,3,-7654,1,"-0.000856218970472955"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,5,INT16_MIN,4,"-5.11999969"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,5,INT16_MIN,3,"-0.0511999969"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,5,INT16_MIN,2,"-0.00051199997"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,5,INT16_MIN,1,"-0.0000051199997"); 
    TEST_DIVISION(UINT24_MAX,-INT16_MIN,"511.999969482421875"); 
    TEST_DIVISION(UINT24_MAX,2,"8388607.5"); 
    TEST_DIVISION(UINT24_MAX,1024,"16383.9990234375"); 
    TEST_DIVISION(UINT24_MAX,(1 << 12),"4095.999755859375"); 
    TEST_DIVISION(UINT24_MAX,(1 << 13),"2047.9998779296875"); 
    TEST_DIVISION(UINT24_MAX,(1 << 14),"1023.99993896484375"); 
    TEST_DIVISION(UINT24_MAX,(1 << 15)*100,"5.11999969482421875"); 
    TEST_DIVISION(UINT24_MAX,(1 << 15)*10,"51.1999969482421875"); 
    TEST_DIVISION(UINT24_MAX,(1 << 15),"511.999969482421875"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,0,(1 << 15),1,"51199.969482421875"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,0,(1 << 15),2,"5119999.69482421875"); 
    TEST_DIVISION_SHIFT(UINT24_MAX*10,1,(1 << 15),2,"511999.969482421875"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,1,(1 << 15),2,"51199.9969482421875"); 
    TEST_DIVISION_SHIFT(UINT24_MAX,1,(1 << 15)*10,2,"5119.99969482421875"); 
    TEST_DIVISION((1 << 15)*10,(1 << 15)*10,"1"); 
    TEST_DIVISION(1,3,"0.3333333333333333333"); 

    goto label__next_step; 
  }; 


 label__test__inverse: { 
    write_string_ln(STDOUT_FILENO, "--- INVERSE ---"); 
    
    // RETURN_TYPE_T decimal__inverse_r(decimal_env_t * decimal_env, decimal_t * d_r); 
    
#define TEST_INVERSE(__int_number__,__string_expected_result__) {	\
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number__));	\
      write_string(stdprint_d, "1 / "); decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " = "); \
      decimal__inverse_r(decimal_env, &d);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#define TEST_INVERSE_SHIFT(__int_number_d__,__shift_right_d__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__shift_right_by_r(decimal_env, &d, (__shift_right_d__));	\
      write_string(stdprint_d, "1 / "); decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " = "); \
      decimal__inverse_r(decimal_env, &d);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 

#if 0 
    //TEST_INVERSE(8192,"0.0001220703125"); 
    //TEST_INVERSE(16384,"0.00006103515625"); 
    //TEST_INVERSE(32768,"0.000030517578125"); 
    TEST_INVERSE_SHIFT(32768,2,"0.30517578125"); 
    goto label__next_step; 
#endif 

    
    TEST_INVERSE(16,"0.0625"); 
    TEST_INVERSE(1,"1"); 
    TEST_INVERSE(10,"0.1"); 
    TEST_INVERSE(100,"0.01"); 
    TEST_INVERSE(1000,"0.001"); 
    TEST_INVERSE(10000,"0.0001"); 
    TEST_INVERSE(2,"0.5"); 
    TEST_INVERSE(4,"0.25"); 
    TEST_INVERSE(8,"0.125"); 
    TEST_INVERSE(16,"0.0625"); 
    TEST_INVERSE(32,"0.03125"); 
    TEST_INVERSE(64,"0.015625"); 
    TEST_INVERSE(128,"0.0078125"); 
    TEST_INVERSE(256,"0.00390625"); 
    TEST_INVERSE(512,"0.001953125"); 
    TEST_INVERSE(1024,"0.0009765625"); 
    TEST_INVERSE(2048,"0.00048828125"); 
    TEST_INVERSE(4096,"0.000244140625"); 
    TEST_INVERSE(8192,"0.0001220703125"); 
    TEST_INVERSE(16384,"0.00006103515625"); 
    TEST_INVERSE(32768,"0.000030517578125"); 
    TEST_INVERSE(65536,"0.0000152587890625"); 
    TEST_INVERSE(131072,"0.00000762939453125"); 
    TEST_INVERSE(262144,"0.000003814697265625"); 
    TEST_INVERSE(524288,"0.0000019073486328125"); 
    TEST_INVERSE(1048576,"0.00000095367431640625"); 
    TEST_INVERSE(2097152,"0.000000476837158203125"); 
    TEST_INVERSE(4194304,"0.0000002384185791015625"); 
    TEST_INVERSE(8388608,"0.00000011920928955078125"); 
    TEST_INVERSE(16777216,"0.000000059604644775390625"); 

    goto label__next_step; 
  }; 

 label__test__division_using_inverse: { 
    write_string_ln(STDOUT_FILENO, "--- DIVISION USING INVERSE ---"); 

#define TEST_DIVISION_USING_INVERSE(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " / "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__inverse_r(decimal_env, &e);				\
      decimal__mult_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
  
#define TEST_DIVISION_USING_INVERSE_SHIFT(__int_number_d__,__shift_right_d__,__int_number_e__,__shift_right_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__shift_right_by_r(decimal_env, &d, (__shift_right_d__));	\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__shift_right_by_r(decimal_env, &e, (__shift_right_e__));	\
      decimal__print_r(stdprint_d, decimal_env, &d); write_string(stdprint_d, " / "); decimal__print_r(stdprint_d, decimal_env, &e); write_string(stdprint_d, " = "); \
      decimal__inverse_r(decimal_env, &e);				\
      decimal__mult_r(decimal_env, &d, &e);				\
      decimal__print_r(stdprint_d, decimal_env, &d);			\
      write_string_ln(stdprint_d, "  [[ Expected: " __string_expected_result__ " ]] "); \
    }; 
    
    

    TEST_DIVISION_USING_INVERSE(1,4,"0.25"); 
    TEST_DIVISION_USING_INVERSE(3,3,"1"); 
    TEST_DIVISION_USING_INVERSE(33,3,"11"); 
    TEST_DIVISION_USING_INVERSE(66,3,"22"); 
    TEST_DIVISION_USING_INVERSE(333,3,"111"); 
    TEST_DIVISION_USING_INVERSE(3333,3,"1111"); 
    TEST_DIVISION_USING_INVERSE(33333,3,"11111"); 
    TEST_DIVISION_USING_INVERSE(333333,3,"111111"); 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,3, "i / 3"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,4, "i / 4"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,5, "i / 5"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,6, "i / 6"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,7, "i / 7"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,8, "i / 8"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,9, "i / 9"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,10, "i / 10"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,11, "i / 11"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,12, "i / 12"); }; 
    for (int i = 0; i <= 12; i++) { TEST_DIVISION_USING_INVERSE(i,13, "i / 13"); }; 
    TEST_DIVISION_USING_INVERSE_SHIFT(65535,3,-7654,1,"-0.000856218970472955"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,5,INT16_MIN,4,"-5.11999969"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,5,INT16_MIN,3,"-0.0511999969"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,5,INT16_MIN,2,"-0.00051199997"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,5,INT16_MIN,1,"-0.0000051199997"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,-INT16_MIN,"511.999969482421875"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,2,"8388607.5"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,1024,"16383.9990234375"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 12),"4095.999755859375"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 13),"2047.9998779296875"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 14),"1023.99993896484375"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 15)*100,"5.11999969482421875"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 15)*10,"51.1999969482421875"); 
    TEST_DIVISION_USING_INVERSE(UINT24_MAX,(1 << 15),"511.999969482421875"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,0,(1 << 15),1,"51199.969482421875"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,0,(1 << 15),2,"5119999.69482421875"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX*10,1,(1 << 15),2,"511999.969482421875"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,1,(1 << 15),2,"51199.9969482421875"); 
    TEST_DIVISION_USING_INVERSE_SHIFT(UINT24_MAX,1,(1 << 15)*10,2,"5119.99969482421875"); 
    TEST_DIVISION_USING_INVERSE((1 << 15)*10,(1 << 15)*10,"1"); 
    TEST_DIVISION_USING_INVERSE(1,3,"0.3333333333333333333"); 
    
    
    goto label__next_step; 
  }; 


 label__test__division__benchmark: { 
    write_string_ln(STDOUT_FILENO, "--- DIVISION - BENCHMARK ---"); 

#undef TEST_DIVISION 
#define TEST_DIVISION(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__div_r(decimal_env, &d, &e);				\
    }; 
    
    //test_decimal_division__uint16_diag(STDERR_FILENO, decimal_env); 
    //test_decimal_division__uint16_quad(STDERR_FILENO, decimal_env); 
    
    {
      uint16_t i; 
      uint16_t j; 
      uint32_t count_failed = 0; 
      uint32_t count_all    = 0; 
      i = 1; 
      for (;;) { 
	//if (0 == (i & 0x0F)) 
	{ dputs_array(stduser_d, "i = " , int_string__stack(i), "\r"); }; 
	j = 1; 
	for (;;) { 
	  //if (0 == (j & 0xFF)) { dputs_array(stduser_d, "j = " , int_string__stack(j), "\r"); }; 
	  { dputs_array(stduser_d, "j = " , int_string__stack(j), "\r"); }; 
	  //const int_decimal_error_t ok_huh = test_decimal__unit(stduser_d, decimal_env, i, j); 
	  const int_decimal_error_t ok_huh = DECIMAL__OK; 
	  TEST_DIVISION(i,j,""); 
	  //ok_huh_cumulated &= (ok_huh == DECIMAL__OK); 
	  //if (ok_huh != DECIMAL__OK) break; 
	  if (ok_huh != DECIMAL__OK) count_failed++; 
	  count_all ++; 
	  j++; 
	  if (0 == j) { break; }; 
	}; 
	//assert(false); 
	i++; 
	if (0 == i) { dput_eol(stduser_d); break; } 
      }; 
  
      if (0 == count_failed) { 
	dputs_array(stduser_d, "ALL TESTS SUCCEEDED" " (over ", int_string__stack(count_all), " tests)"  "\n"); 
      } 
      else { 
	dputs_array(stduser_d, int_string__stack(count_failed), " TESTS FAILED" " (over ", int_string__stack(count_all), " tests)" "\n"); 
      }; 
    };


    goto label__next_step; 
  }; 

 label__test__division_using_inverse__benchmark: { 
    write_string_ln(STDOUT_FILENO, "--- DIVISION USING INVERSE - BENCHMARK ---"); 

#undef TEST_DIVISION_USING_INVERSE
#define TEST_DIVISION_USING_INVERSE(__int_number_d__,__int_number_e__,__string_expected_result__) { \
      decimal_t d;							\
      decimal_t e;							\
      decimal__cast_from_int_r(decimal_env, &d, (__int_number_d__));	\
      decimal__cast_from_int_r(decimal_env, &e, (__int_number_e__));	\
      decimal__inverse_r(decimal_env, &e);				\
      decimal__mult_r(decimal_env, &d, &e);				\
    }; 
    
    //const int stdprint_d__ = stdprint_d; 
    //stdprint_d = stdlog_d; 
    
    {
      uint16_t i; 
      uint16_t j; 
      uint32_t count_failed = 0; 
      uint32_t count_all    = 0; 
      i = 1; 
      for (;;) { 
	//if (0 == (i & 0x0F)) 
	{ dputs_array(stduser_d, "i = " , int_string__stack(i), "\r"); }; 
	j = 1; 
	for (;;) { 
	  //if (0 == (j & 0xFF)) { dputs_array(stduser_d, "j = " , int_string__stack(j), "\r"); }; 
	  { dputs_array(stduser_d, "j = " , int_string__stack(j), "\r"); }; 
	  //const int_decimal_error_t ok_huh = test_decimal__unit(stduser_d, decimal_env, i, j); 
	  const int_decimal_error_t ok_huh = DECIMAL__OK; 
	  TEST_DIVISION_USING_INVERSE(i,j,""); 
	  //ok_huh_cumulated &= (ok_huh == DECIMAL__OK); 
	  //if (ok_huh != DECIMAL__OK) break; 
	  if (ok_huh != DECIMAL__OK) count_failed++; 
	  count_all ++; 
	  j++; 
	  if (0 == j) { break; }; 
	}; 
	//assert(false); 
	i++; 
	if (0 == i) { dput_eol(stduser_d); break; } 
      }; 
  
      if (0 == count_failed) { 
	dputs_array(stduser_d, "ALL TESTS SUCCEEDED" " (over ", int_string__stack(count_all), " tests)"  "\n"); 
      } 
      else { 
	dputs_array(stduser_d, int_string__stack(count_failed), " TESTS FAILED" " (over ", int_string__stack(count_all), " tests)" "\n"); 
      }; 
    };

    //stdprint_d = stdprint_d__; 
    goto label__next_step; 
  }; 





}; 
