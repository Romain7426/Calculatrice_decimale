
static void decimal__mantisse__double(decimal_env_t * decimal_env, uint8_t * mantisse, const uint8_t mantisse_size, uint8_t * empty_huh_r, uint8_t * infinity_huh_r) { 
  uint8_t d_last_index; 
  uint8_t d_first_index; 
  decimal_mantisse__get_last_and_first_indexes(mantisse, mantisse_size, MANTISSE_ENDS__ZERO__IGNORE_BOTH__MASK, &d_last_index, &d_first_index, empty_huh_r); 
  if (*empty_huh_r) return; 
  
  if (d_last_index < (mantisse_size - 1)) { // No overflow could happen. 
    if (infinity_huh_r != NULL) { *infinity_huh_r = false; }; 
    
    uint8_t d_index = d_first_index; 
    uint8_t retenue = 0; 
    for (;;) { 
      const uint8_t d_v = *(mantisse + d_index); 
      const uint16_t v = (((uint16_t)d_v) << 1) + ((uint16_t) retenue); 
      if (v < DECIMAL_BASE) { 
	*(mantisse + d_index) = v; 
	retenue = 0; 
      } 
      else { 
	*(mantisse + d_index) = v - DECIMAL_BASE; 
	retenue = 1; 
      }; 
      d_index++; 
      if (d_index > d_last_index) { 
	if (0 == retenue) break; 
	*(mantisse + d_index) = 1; 
	break; 
      }; 
    }; 
    return; 
  }; 
  
  assert(d_last_index == (mantisse_size - 1)); // Overflow could happen. 
  { 
    uint8_t d_index = d_first_index; 
    uint8_t retenue = 0; 
    for (;;) { 
      const uint8_t d_v = *(mantisse + d_index); 
      const uint16_t v = (((uint16_t)d_v) << 1) + ((uint16_t) retenue); 
      if (v < DECIMAL_BASE) { 
	*(mantisse + d_index) = v; 
	retenue = 0; 
      } 
      else { 
	*(mantisse + d_index) = v - DECIMAL_BASE; 
	retenue = 1; 
      }; 
      d_index++; 
      if (d_index > d_last_index) { 
	if (infinity_huh_r != NULL) { *infinity_huh_r = (0 != retenue); }; 
	break; 
      }; 
    }; 
    return; 
  }; 
  assert(false); 
}; 


RETURN_TYPE_T decimal__add_aux_identical_r(decimal_env_t * decimal_env, decimal_t * d_r) { 
  const uint8_t d_status = (*d_r)[DECIMAL_STATUS_INDEX]; 
  goto label__start; 
  
 label__exit: { 
#ifdef RETURN_ERROR 
    return DECIMAL__OK; 
#else 
    return d_r; 
#endif 
  };

 label__error__number_was_empty: { 
    decimal_env -> error_id = DECIMAL__NUMBER_WAS_EMPTY; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Number was empty"); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
#ifdef RETURN_ERROR 
    return decimal_env -> error_id; 
#else 
    return NULL; 
#endif 
  }; 

  label__start: {}; 
  if (d_status == DECIMAL_STATUS__INVALID    ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__INFINI     ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__ZERO       ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE) goto label__exit; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__NEG_INFINI ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
  if (d_status == DECIMAL_STATUS__NEG_EPSILON) goto label__exit; 
  // --- 
  assert(d_status == DECIMAL_STATUS__POS || d_status == DECIMAL_STATUS__NEG); 
  
  uint8_t * mantisse = &((*d_r)[DECIMAL_DIGITS_INDEX_FIRST]); 
  const uint8_t mantisse_size = DECIMAL_DIGITS_SIZE; 
  uint8_t empty_huh; 
  uint8_t infinity_huh; 
  decimal__mantisse__double(decimal_env, mantisse, mantisse_size, &empty_huh, &infinity_huh); 
  
  if (empty_huh) { goto label__error__number_was_empty; }; 
  
  if (infinity_huh) { 
    (*d_r)[DECIMAL_STATUS_INDEX] = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__POS_INFINI : DECIMAL_STATUS__NEG_INFINI; 
    goto label__exit; 
  }; 
  
  goto label__exit; 
  
  assert(false); 
}; 

RETURN_TYPE_T decimal__add_r(decimal_env_t * decimal_env, decimal_t * d_r, const decimal_t * e_r) { 
  if (d_r == e_r) return decimal__add_aux_identical_r(decimal_env, d_r); 
  const uint8_t d_status = (*d_r)[DECIMAL_STATUS_INDEX]; 
  const uint8_t e_status = (*e_r)[DECIMAL_STATUS_INDEX]; 
  goto label__start; 
  
 label__exit: { 
#ifdef RETURN_ERROR 
    return DECIMAL__OK; 
#else 
    return d_r; 
#endif 
  };

 error_label__missing_status_case_for_d: { 
    const char * status_cstr = decimal_status__cstr(d_status); 
    decimal_env -> error_id = DECIMAL__STATUS_NOT_LISTED_IN_SWITCH; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Status of 'd' not listed in switch: %d [%s]", ((int)e_status), status_cstr); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
#ifdef RETURN_ERROR 
    return decimal_env -> error_id; 
#else 
    return NULL; 
#endif 
  }; 

 error_label__missing_status_case_for_e: { 
    const char * status_cstr = decimal_status__cstr(e_status); 
    decimal_env -> error_id = DECIMAL__STATUS_NOT_LISTED_IN_SWITCH; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Status of 'e' not listed in switch: %d [%s]", ((int)e_status), status_cstr); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
#ifdef RETURN_ERROR 
    return decimal_env -> error_id; 
#else 
    return NULL; 
#endif 
  }; 

 error_label__malformed_number: { 
    decimal_env -> error_id = DECIMAL__MALFORMED_NUMBER; 
    //snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Malformed number: index = %d â€” char = %u", (int)index, ((unsigned int)(*d_r)[index])); 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Malformed number"); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
#ifdef RETURN_ERROR 
    return decimal_env -> error_id; 
#else 
    return NULL; 
#endif 
  }; 

  label__start: {}; 
  // --- 
  if (d_status == DECIMAL_STATUS__INVALID    ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__INFINI     ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__ZERO       ) { bcopy(e_r, d_r, DECIMAL_SIZE); goto label__exit; }; 
  if (d_status == DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE) goto label__exit; 
  // --- 
  if (e_status == DECIMAL_STATUS__INVALID    ) { (*d_r)[0] = DECIMAL_STATUS__INVALID; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__INFINI     ) { (*d_r)[0] = DECIMAL_STATUS__INFINI ; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__ZERO       ) {                                      goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE) { (*d_r)[0] = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_INFINI  && e_status == DECIMAL_STATUS__NEG_INFINI ) { (*d_r)[0] = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
  if (d_status == DECIMAL_STATUS__NEG_INFINI  && e_status == DECIMAL_STATUS__POS_INFINI ) { (*d_r)[0] = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
  if (d_status == DECIMAL_STATUS__POS_EPSILON && e_status == DECIMAL_STATUS__NEG_EPSILON) { (*d_r)[0] = DECIMAL_STATUS__ZERO; goto label__exit; }; 
  if (d_status == DECIMAL_STATUS__NEG_EPSILON && e_status == DECIMAL_STATUS__POS_EPSILON) { (*d_r)[0] = DECIMAL_STATUS__ZERO; goto label__exit; }; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
  if (d_status == DECIMAL_STATUS__NEG_INFINI ) goto label__exit; 
  if (e_status == DECIMAL_STATUS__POS_INFINI ) { (*d_r)[0] = DECIMAL_STATUS__POS_INFINI; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__NEG_INFINI ) { (*d_r)[0] = DECIMAL_STATUS__NEG_INFINI; goto label__exit; }; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_EPSILON && e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
  if (d_status == DECIMAL_STATUS__NEG_EPSILON && e_status == DECIMAL_STATUS__NEG_EPSILON) goto label__exit; 
  if (d_status == DECIMAL_STATUS__POS_EPSILON) { bcopy(e_r, d_r, DECIMAL_SIZE); goto label__exit; }; 
  if (d_status == DECIMAL_STATUS__NEG_EPSILON) { bcopy(e_r, d_r, DECIMAL_SIZE); goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
  if (e_status == DECIMAL_STATUS__NEG_EPSILON) goto label__exit; 
  // --- 
  if (!(d_status == DECIMAL_STATUS__POS || d_status == DECIMAL_STATUS__NEG)) goto error_label__missing_status_case_for_d; 
  if (!(e_status == DECIMAL_STATUS__POS || e_status == DECIMAL_STATUS__NEG)) goto error_label__missing_status_case_for_e; 
  // --- 
  const uint8_t same_sign = (d_status == e_status); 
  
  if (same_sign) goto label__same_sign; 
  else goto label__opposite_sign; 
  
  
  label__same_sign: { 
    decimal_mantisse__EOF2ZERO_r(d_r); 
    int index = DECIMAL_DIGITS_INDEX; 
    index--; 
    for (;;) { 
      index++; 
      if (index >= DECIMAL_DIGITS_INDEX_XLAST) goto error_label__malformed_number; 
      if ((*e_r)[index] == DECIMAL_EOF_BYTE) continue; 
      break; 
    }; 
    uint8_t retenue = 0; 
    for (;;) { 
      const uint16_t v = (*d_r)[index] + (*e_r)[index] + retenue; 
      DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "d[", int_string__stack(index), "] = ", uint_string__stack((*d_r)[index]), "\n")); 
      DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "e[", int_string__stack(index), "] = ", uint_string__stack((*e_r)[index]), "\n")); 
      DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "r[", int_string__stack(index), "] = ", uint_string__stack(retenue), "\n")); 
      DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "v[", int_string__stack(index), "] = ", uint_string__stack(v), "\n")); 
      DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "B[", int_string__stack(index), "] = ", uint_string__stack(DECIMAL_BASE), "\n")); 
      if (v < DECIMAL_BASE) { 
	(*d_r)[index] = v; 
	retenue = 0; 
      }
      else { 
	(*d_r)[index] = v - DECIMAL_BASE; 
	retenue = 1; 
      }; 
      index++; 
      if (index >= DECIMAL_DIGITS_INDEX_XLAST) { if (retenue > 0) goto label__pos_infinity; break; } 
      if ((*e_r)[index] == DECIMAL_EOF_BYTE) { 
	if (0 == retenue) break; 
	for (;;) { 
	  const uint8_t d_v = (*d_r)[index]; 
	  const uint16_t  v = d_v + retenue; 
	  DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "d[", int_string__stack(index), "] = ", uint_string__stack(d_v), "\n")); 
	  DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "r[", int_string__stack(index), "] = ", uint_string__stack(retenue), "\n")); 
	  DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "v[", int_string__stack(index), "] = ", uint_string__stack(v), "\n")); 
	  DEBUG_STATEMENT(100,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "B[", int_string__stack(index), "] = ", uint_string__stack(DECIMAL_BASE), "\n")); 
	  if (v < DECIMAL_BASE) { 
	    (*d_r)[index] = v; 
	    retenue = 0; 
	  }
	  else { 
	    (*d_r)[index] = v - DECIMAL_BASE; 
	    retenue = 1; 
	  }; 
	  index++; 
	  if (0 == retenue) break; 
	  if (index >= DECIMAL_DIGITS_INDEX_XLAST) goto label__pos_infinity; 
	}; 
	break; 
      }; 
    }; 
    // Normalization 
    { 
      decimal_mantisse__ZERO2EOF_right_r(d_r); 
      decimal_mantisse__ZERO2EOF_left_r(d_r); 
      decimal_status__if_ZERO_then_set_status_r(d_r); 
    }; 
    goto label__exit; 
  }; 
  
  label__pos_infinity: { 
    (*d_r)[0] = DECIMAL_STATUS__POS_INFINI; 
    goto label__exit; 
  }; 
  
  // Not same sign => substraction 

 label__opposite_sign__d_greater_than_e: { 
    assert(false); 
  }; 

 label__opposite_sign__e_greater_than_d: { 
    assert(false); 
  }; 

 label__opposite_sign: { 
    DEBUG_STATEMENT(10000,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "d = "); decimal__print_raw_ln_r(STDERR_FILENO, decimal_env, d_r);); 
    decimal_mantisse__EOF2ZERO_right_r(d_r); 
    DEBUG_STATEMENT(10000,dputs_array(STDERR_FILENO, "[DEBUG][",  __FUNCTION__, ":", STRINGIFY(__LINE__), "]", " ", "e = "); decimal__print_raw_ln_r(STDERR_FILENO, decimal_env, e_r);); 
    // Is 'e' empty? 
    int index; 
    { 
      index = DECIMAL_DIGITS_INDEX; 
      index--; 
      for (;;) { 
	index++; 
	if (index >= DECIMAL_DIGITS_INDEX_XLAST) goto label__exit; 
	const uint8_t e_v0 = (*e_r)[index]; 
	if (e_v0 == DECIMAL_EOF_BYTE) continue; 
	if (e_v0 == 0) continue; 
	break; 
      }; 
    }; 
    const uint8_t e_first_significant_digit_index = index; 
#if 0 
    // Who is greater? 
    { 
      uint8_t d_is_greater_than_e = true; 
      index = e_first_significant_digit_index; 
      uint8_t retenue = 0; 
      for (;;) { 
	const uint8_t e_v0 = (*e_r)[index]; 
	if ((e_v0 == DECIMAL_EOF_BYTE) && (retenue == 0)) break; 
	const uint8_t e_v = ((e_v0 == DECIMAL_EOF_BYTE) ? 0 : e_v0) + retenue; 
	const uint8_t d_v = (*d_r)[index]; 
	if (d_v == DECIMAL_EOF_BYTE) { d_is_greater_than_e = false; break; }; 
	retenue = (e_v > d_v) ? 1 : 0; 
	index++; 
	if (index >= DECIMAL_DIGITS_INDEX_XLAST) break; 
	continue; 
      }; 
      if (d_is_greater_than_e) goto label__opposite_sign__d_greater_than_e; 
      else goto label__opposite_sign__e_greater_than_d; 
      assert(false); 
    }; 
#endif 
    index = e_first_significant_digit_index; 
    uint8_t retenue = 0; 
    for (;;) { 
      const uint8_t e_v0 = (*e_r)[index]; 
      if ((e_v0 == DECIMAL_EOF_BYTE) && (retenue == 0)) break; 
      const uint8_t e_v = ((e_v0 == DECIMAL_EOF_BYTE) ? 0 : e_v0) + retenue; 
      const uint8_t d_v = (*d_r)[index]; 
      if (d_v != DECIMAL_EOF_BYTE) { 
	if (e_v > d_v) { 
	  (*d_r)[index] += (DECIMAL_BASE - e_v); 
	  retenue = 1; 
	} 
	else { 
	  (*d_r)[index] -= e_v; 
	  retenue = 0; 
	}; 
	index++; 
	if (index >= DECIMAL_DIGITS_INDEX_XLAST) break; 
	continue; 
      }; 
      
      assert(d_v == DECIMAL_EOF_BYTE); 
      { 
	// There's nothing left in 'd', but we still have digits to substract to 'd'. 
	//  ==> e > d 
	// 
	// In that case, the easiest thing to do would be to start over and compute 'e-d'. 
	// 
	// But we already have computed stuffs, is there anything we could do? 
	// Actually, not really, as current resulting digits won't be the resulting digits â€” they have to be adjusted. 
	// Basically, that adjustment is to compute 'e-d' knowning the digits of 'd-e'. 
	// Actually, digits aren't the same, because, as 'd' was lower than 'd', what got actually computed was Â«[d+(1<<{high index of d +1})] - eÂ» (actually, it's not 'e' but only the low digits of 'e', whose indexes are lower than high-index-of-d). 
	// So, to get the wanted digits, those of 'e-d', we need to substract that intermediate result to Â«1<<{high index of d +1}Â». 
	// Which means that we need to compute a second substraction (a little bit faster, as one operand is known and constant). 
	const uint8_t base = index; 
	// ZERO: Before doing anything, we need to check that there are actually non-null left-over digits in 'e'. 
	{ 
	  uint8_t e_empty_huh = true; 
	  index = base; 
	  for (;;) { 
	    const uint8_t e_v0 = (*e_r)[index]; 
	    if (e_v0 == DECIMAL_EOF_BYTE) break; 
	    if (e_v0 != 0) { e_empty_huh = false; break; }; 
	    index++; 
	    if (index >= DECIMAL_DIGITS_INDEX_XLAST) break; 
	  }; 
	  if (e_empty_huh) { 
	    if (0 == retenue) break; // Actually, nothing left, so we're done. 
	  }; 
	}; 
	const uint8_t e_zero_count = index - base; 
	// FIRST: Now, we need to adjust the current result: 10â€¦0 - d. 
	// It's easy: it's a 9-complement, except the first non-null digit which is a 10-complement. 
	// So: (i) let's skip the zeroes; (ii) do the job. 
	{ 
	  index = DECIMAL_DIGITS_INDEX; 
	  index--; 
	  for (;;) { 
	    index++; 
	    if (index >= base) break; 
	    const uint8_t d_v0 = (*d_r)[index]; 
	    if (d_v0 == DECIMAL_EOF_BYTE) continue; 
	    if (d_v0 == 0) continue; 
	    break; 
	  }; 
	}; 
	const uint8_t d_first_significant_digit_index = index; 
	if (d_first_significant_digit_index < base) { 
	  // 'd' is not empty 
	  index = d_first_significant_digit_index; 
	  (*d_r)[index] = DECIMAL_BASE - (*d_r)[index]; 
	  for (;;) { 
	    index++; 
	    if (index == base) break; 
	    (*d_r)[index] = DECIMAL_BASE_MINUS1 - (*d_r)[index]; 
	  }; 
	}; 
	// SECOND & THIRD: reversing retenue, substracting to 'e', copying upper digits of 'e' into 'd' 
	// Well, as 'e' is read-only, we will change that order while keeping the semantic: 
	// (i) copy into 'd'; (ii) decrementing these copied digits by one if retenue was null. 
	if (1 == retenue) { 
	  // No retenue has to be decremented to 'e'. So just copying 'e' into 'd'. 
	  index = base; 
	  for (;;) { 
	    const uint8_t e_v0 = (*e_r)[index]; 
	    if (e_v0 == DECIMAL_EOF_BYTE) break; 
	    (*d_r)[index] = e_v0; 
	    index++; 
	    if (index >= DECIMAL_DIGITS_INDEX_XLAST) break; 
	  }; 
	} 
	else { 
	  assert(0 == retenue); 
	  // As 'retenue' is null, the left part of 'e' should be decremented by one. 
	  // As 'retenue' is null, the current digit of 'e' is not EOF. 
	  // First, dealing with the trailing zeroes of 'e'. 
	  index = base; 
	  const uint8_t e_non_zero_index = base + e_zero_count; 
	  for (;;) { 
	    if (index >= e_non_zero_index) break; 
	    (*d_r)[index] = DECIMAL_BASE - 1; 
	    index++; 
	  }; 
	  { 
	    assert(index < DECIMAL_DIGITS_INDEX_XLAST); 
	    const uint8_t e_v0 = (*e_r)[index]; 
	    assert(e_v0 < DECIMAL_EOF_BYTE); 
	    (*d_r)[index] = e_v0 - 1; 
	    index++; 
	  }; 
	  for (;;) { 
	    if (index >= DECIMAL_DIGITS_INDEX_XLAST) break; 
	    const uint8_t e_v0 = (*e_r)[index]; 
	    if (e_v0 == DECIMAL_EOF_BYTE) break; 
	    (*d_r)[index] = e_v0; 
	    index++; 
	  }; 
	}; 
	// FOURTH: Adjusting the sign of 'd'. 
	(*d_r)[DECIMAL_STATUS_INDEX] = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__NEG : DECIMAL_STATUS__POS; 
	// FIFTH: Nothing left to do. 
	break; 
      }; 
    }; 
    
    // Normalization 
    decimal_mantisse__ZERO2EOF_right_r(d_r); 
    // In both cases ('d' > 'e' & 'd' < 'e'), the left part of 'd' was already normalized. 
    // 2021-11-14: Â«180 - 128 = 052Â» => the left part of 'd' did not get normalized. 
    decimal_mantisse__ZERO2EOF_left_r(d_r); 
    // Still, 'd' could be zero. 
    decimal_status__if_ZERO_then_set_status_r(d_r); 
    
    goto label__exit; 
  }; 
  
  assert(false); 
}; 

