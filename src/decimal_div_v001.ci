

static RETURN_TYPE_T decimal__div_r__aux(decimal_env_t * decimal_env, decimal_t * d_r, const decimal_t * e_r, decimal_t * c_r, const uint8_t normalize_c_huh, int16_t * c_N_ref) { 
  uint8_t       * d = *d_r; 
  const uint8_t * e = *e_r; 
  const uint8_t d_status = *d; 
  const uint8_t e_status = *e; 
  if (d_status == DECIMAL_STATUS__INVALID    ) goto label__exit; 
  if (e_status == DECIMAL_STATUS__INVALID    ) { *d = DECIMAL_STATUS__INVALID; goto label__exit; }; 
  // --- 
  if (d_status == DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE) goto label__exit; 
  if (e_status == DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
  // --- 
  if (d_status == DECIMAL_STATUS__INFINI) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__ZERO       ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) goto label__exit; 
    assert(false); 
  }; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_INFINI) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__ZERO; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) { *d = DECIMAL_STATUS__NEG_INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) { *d = DECIMAL_STATUS__NEG_INFINI; goto label__exit; }; 
    assert(false); 
  }; 
  // --- 
  if (d_status == DECIMAL_STATUS__NEG_INFINI) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__ZERO; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) { *d = DECIMAL_STATUS__POS_INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) { *d = DECIMAL_STATUS__POS_INFINI; goto label__exit; }; 
    assert(false); 
  }; 
  // --- 
  if (d_status == DECIMAL_STATUS__ZERO) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) goto label__exit; 
    assert(false); 
  }; 
  // --- 
  if (d_status == DECIMAL_STATUS__POS_EPSILON) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__ZERO; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) { *d = DECIMAL_STATUS__NEG_EPSILON; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) { *d = DECIMAL_STATUS__NEG_EPSILON; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    assert(false); 
  }; 
  // --- 
  if (d_status == DECIMAL_STATUS__NEG_EPSILON) { 
    if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__ZERO; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_INFINI ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG_INFINI ) { *d = DECIMAL_STATUS__POS_EPSILON; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS        ) goto label__exit; 
    if (e_status == DECIMAL_STATUS__NEG        ) { *d = DECIMAL_STATUS__POS_EPSILON; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__INFINI; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__POS_EPSILON) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    if (e_status == DECIMAL_STATUS__NEG_EPSILON) { *d = DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE; goto label__exit; }; 
    assert(false); 
  }; 
  // --- 
  assert(d_status == DECIMAL_STATUS__POS || d_status == DECIMAL_STATUS__NEG); 
  // --- 
  if (e_status == DECIMAL_STATUS__ZERO       ) { *d = DECIMAL_STATUS__INFINI; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__INFINI     ) { *d = DECIMAL_STATUS__ZERO  ; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__POS_INFINI ) { *d = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__POS_EPSILON : DECIMAL_STATUS__NEG_EPSILON; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__NEG_INFINI ) { *d = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__NEG_EPSILON : DECIMAL_STATUS__POS_EPSILON; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__POS_EPSILON) { *d = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__POS_INFINI  : DECIMAL_STATUS__NEG_INFINI ; goto label__exit; }; 
  if (e_status == DECIMAL_STATUS__NEG_EPSILON) { *d = (d_status == DECIMAL_STATUS__POS) ? DECIMAL_STATUS__NEG_INFINI  : DECIMAL_STATUS__POS_INFINI ; goto label__exit; }; 
  // --- 
  assert(e_status == DECIMAL_STATUS__POS || e_status == DECIMAL_STATUS__NEG); 
  // --- 
  const uint8_t same_sign_huh = (d_status == e_status); 
  
  // Division is a floating-point operation. 
  // So we will switch 'd' and 'e' from fixed-point to floating-point. 
  
  // First, let's renormalize 'd' and 'e' (removing all un-necessary zeroes). 
 
  decimal_t shifted_d; 
  bcopy(d, shifted_d, DECIMAL_SIZE); 
  DEBUG_STATEMENT(100,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_d = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_d);); 
  uint8_t * shifted_d_ptr = &(shifted_d[0]); 
  uint8_t d_first_index; 
  uint8_t d_last_index; 
  { 
    uint16_t d_index = DECIMAL_SIZE; 
    for (;;) { 
      d_index--; 
      if (0 == d_index) goto label__error__malformed_number; 
      const uint8_t d_value = *(shifted_d_ptr + d_index); 
      if (d_value == DECIMAL_EOF_BYTE) continue; 
      if (d_value != 0) break; 
      *(shifted_d_ptr + d_index) = DECIMAL_EOF_BYTE; 
    }; 
    d_first_index = d_index; 
    d_index = 0; 
    for (;;) { 
      d_index++; 
      if (DECIMAL_SIZE == d_index) goto label__error__malformed_number; 
      const uint8_t d_value = *(shifted_d_ptr + d_index); 
      if (d_value == DECIMAL_EOF_BYTE) continue; 
      if (d_value != 0) break; 
      *(shifted_d_ptr + d_index) = DECIMAL_EOF_BYTE; 
    }; 
    d_last_index = d_index;  
  }; 
  const uint8_t d_len = d_first_index - d_last_index + 1; 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_first_index: "); dputn(STDERR_FILENO, d_first_index); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_last_index : "); dputn(STDERR_FILENO, d_last_index ); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_len        : "); dputn(STDERR_FILENO, d_len        ); write_eol(STDERR_FILENO);); 
  
  
  decimal_t shifted_e; 
  bcopy(e, shifted_e, DECIMAL_SIZE); 
  DEBUG_STATEMENT(100,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_e);); 
  uint8_t * shifted_e_ptr = &(shifted_e[0]); 
  uint8_t e_first_index; 
  uint8_t e_last_index; 
  { 
    uint16_t e_index = DECIMAL_SIZE; 
    for (;;) { 
      e_index--; 
      if (0 == e_index) goto label__error__malformed_number; 
      const uint8_t e_value = *(shifted_e_ptr + e_index); 
      if (e_value == DECIMAL_EOF_BYTE) continue; 
      if (e_value != 0) break; 
      *(shifted_e_ptr + e_index) = DECIMAL_EOF_BYTE; 
    }; 
    e_first_index = e_index; 
    e_index = 0; 
    for (;;) { 
      e_index++; 
      if (DECIMAL_SIZE == e_index) goto label__error__malformed_number; 
      const uint8_t e_value = *(shifted_e_ptr + e_index); 
      if (e_value == DECIMAL_EOF_BYTE) continue; 
      if (e_value != 0) break; 
      *(shifted_e_ptr + e_index) = DECIMAL_EOF_BYTE; 
    }; 
    e_last_index = e_index;  
  }; 
  const uint8_t e_len = e_first_index - e_last_index + 1; 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "e_first_index: "); dputn(STDERR_FILENO, e_first_index); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "e_last_index : "); dputn(STDERR_FILENO, e_last_index ); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "e_len        : "); dputn(STDERR_FILENO, e_len        ); write_eol(STDERR_FILENO);); 

  // Now we can compute the exponents ('N'). 
  const int d_N = d_first_index - DECIMAL_FIXED_POINT_INDEX; 
  const int e_N = e_first_index - DECIMAL_FIXED_POINT_INDEX; 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_N: "); dputn(STDERR_FILENO, d_N); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "e_N: "); dputn(STDERR_FILENO, e_N); write_eol(STDERR_FILENO);); 
  
  
  // Now that the exponent are computed, we will normalize 
  // 'd' and 'e' into 'shifted_d' and 'shifted_e', 
  // where the most significant digit will be moved to index "DECIMAL_SIZE-1". 
  // 
  // Before computing 'shifted_d' and 'shifted_e', 
  // at any step of the division, the first digit of the dividend could be smaller than the first 
  // digit of the divisor — as such, two digits of the dividend would be required. 
  // Symetrically, two digits of the divisor would be required in such a case (more precisely, 
  // a digit-multiple of the divisor would require two digits). 
  // Thus, the most significant digit of 'shifted_e' will always be at index "DECIMAL_SIZE-2". 
  // On the other hand, the most significant digit of 'shifted_d' could be at index "DECIMAL_SIZE-2" or at index "DECIMAL_SIZE-1". 
  // And, the most significant digit of a digit-multiple of 'shifted_e' could be at index "DECIMAL_SIZE-2" or at index "DECIMAL_SIZE-1". 
  // 
  // Especially, regarding the quotient, its exponent is not simply [d_N - e_N], as it has to be decreased 
  // when the most significant digit of 'd' is smaller than the most significant digit of 'e' (think: «1 / 3»). 
  // (In case when both digits are equal, subsequent digits have to be inspected (think: «1110 / 1111»). 
  // 
  // NB:  99 x 01 00 99 = 99 98 01 -> the same number of digits! 
  
  // Therefore, we compare 'd' and 'e' based on their most significant digits, ignoring the floating-point. 
  //uint8_t d_too_small_huh = false; 
  int8_t d_is_greater_equal_smaller_than_e = 1; // 1, 0, -1 -> greater, equal, smaller 
  { 
    int d_index = d_first_index; 
    int e_index = e_first_index; 
    for (;;) { 
      const uint8_t d_v = *(d + d_index); 
      const uint8_t e_v = *(e + e_index); 
      if (e_v == DECIMAL_EOF_BYTE) { if (d_v == DECIMAL_EOF_BYTE) { d_is_greater_equal_smaller_than_e = 0; }; break; }; 
      if (d_v == DECIMAL_EOF_BYTE) { d_is_greater_equal_smaller_than_e = -1; break; }; 
      if (d_v > e_v) break; 
      if (d_v < e_v) { d_is_greater_equal_smaller_than_e = -1; break; }; 
      if (d_index == d_last_index) { 
	if (e_index == e_last_index) { d_is_greater_equal_smaller_than_e = 0; break; }; 
#if 1 
	d_is_greater_equal_smaller_than_e = -1; break; 
#elif 0 
	const uint8_t e_v2 = *(e + e_index); 
	if (e_v2 == DECIMAL_EOF_BYTE) break; 
	if (e_v2 != 0) { d_too_small_huh = true; break; }; 
	if (e_index != DECIMAL_FIXED_POINT_INDEX) { d_too_small_huh = true; break; }; 
	if (*(e + e_index - 1) == DECIMAL_EOF_BYTE) break; 
	d_too_small_huh = true; break; 
#endif 
      }; 
      if (e_index == e_last_index) break; 
      d_index--; 
      e_index--; 
    }; 
  }; 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); dputs_array(STDERR_FILENO, "d_is_greater_equal_smaller_than_e: " "[", int_string__stack(d_is_greater_equal_smaller_than_e), "] ", (0 == d_is_greater_equal_smaller_than_e) ? "equal" : (1 == d_is_greater_equal_smaller_than_e) ? "greater" : "lower", "\n");); 

  const uint8_t d_too_small_huh = (-1 == d_is_greater_equal_smaller_than_e); 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_too_small_huh: "); dputs(STDERR_FILENO, d_too_small_huh ? "true" : "false"); write_eol(STDERR_FILENO);); 
  
  const int c_N = d_too_small_huh ? (d_N - e_N - 1) : (d_N - e_N); 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "c_N: "); dputn(STDERR_FILENO, c_N); write_eol(STDERR_FILENO);); 
  
  if (0 == d_is_greater_equal_smaller_than_e) { 
    *d = same_sign_huh ? DECIMAL_STATUS__POS : DECIMAL_STATUS__NEG; 
    const uint8_t c_N_index = c_N + DECIMAL_FIXED_POINT_INDEX; 
    if (normalize_c_huh) { 
      (*c_r)[0] = *d; 
      if (NULL != c_N_ref) { *c_N_ref = c_N; }; 
      bzero(&(*c_r)[1], DECIMAL_SIZE - 2); 
      (*c_r)[255] = 1; 
      //quotient__print_ln_r(STDERR_FILENO, (decimal_t *)(*c_r), c_N); 
    }; 

    { 
      int d_index = DECIMAL_SIZE; 
      for (;;) { 
	d_index--; 
	if (d_index == c_N_index) break; 
	*(d + d_index) = DECIMAL_EOF_BYTE; 
      }; 
      *(d + d_index) = 1; 
      d_index--; 
      for (;;) { 
	if (d_index < DECIMAL_FIXED_POINT_INDEX) break; 
	*(d + d_index) = 0; 
	d_index--; 
      }; 
      for (;;) { 
	if (d_index == 0) break; 
	*(d + d_index) = DECIMAL_EOF_BYTE; 
	d_index--; 
      }; 
      d_index = c_N_index; 
      for (;;) { 
	d_index++; 
	if (d_index > DECIMAL_FIXED_POINT_INDEX) break; 
	if (*(d + d_index) != DECIMAL_EOF_BYTE) continue; 
	*(d + d_index) = 0; 
      }; 
    }; 
    
    goto label__exit; 
  }; 

  
  const int shifted_d_len = (d_len != (DECIMAL_SIZE - 1)) ? d_len : (d_too_small_huh ? d_len : (d_len - 1)); 
  { 
    const int target_index    = d_too_small_huh ? (DECIMAL_SIZE - 1) : (DECIMAL_SIZE - 2); 
    const int shifted_d_count = target_index - d_first_index; 
    if (0 == shifted_d_count) { } 
    else if (shifted_d_count > 0) { 
      bcopy(((char *)shifted_d) + d_last_index, ((char *)shifted_d) + d_last_index + shifted_d_count, shifted_d_len); 
      memset(((char *)shifted_d) + d_last_index, DECIMAL_EOF_BYTE, shifted_d_count); 
    } 
    else { 
      const int DELTA_LEN = -shifted_d_count; 
      bcopy(((char *)shifted_d) + d_last_index, ((char *)shifted_d) + d_last_index + shifted_d_count, shifted_d_len); 
      memset(((char *)shifted_d) + d_first_index + shifted_d_count, DECIMAL_EOF_BYTE, DELTA_LEN); 
    }; 
  };
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_d = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_d);); 

  const int shifted_e_len         = (e_len != (DECIMAL_SIZE - 1)) ? e_len : (e_len - 1); 
  const int shifted_e_first_index = (DECIMAL_SIZE - 2); 
  const int shifted_e_last_index  = shifted_e_first_index - shifted_e_len + 1; 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_len: "); dputn(STDERR_FILENO, shifted_e_len); write_eol(STDERR_FILENO);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_first_index: "); dputn(STDERR_FILENO, shifted_e_first_index); write_eol(STDERR_FILENO););  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_last_index: "); dputn(STDERR_FILENO, shifted_e_last_index); write_eol(STDERR_FILENO);); 
  { 
    const int target_index    = shifted_e_first_index; 
    const int shifted_e_count = target_index - e_first_index; 
    DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_count: "); dputn(STDERR_FILENO, shifted_e_count); write_eol(STDERR_FILENO););    if (0 == shifted_e_count) { } 
    else if (shifted_e_count > 0) { 
      bcopy(((char *)shifted_e) + e_last_index, ((char *)shifted_e) + e_last_index + shifted_e_count, shifted_e_len); 
      memset(((char *)shifted_e) + e_last_index, DECIMAL_EOF_BYTE, shifted_e_count); 
    } 
    else { 
      const int DELTA_LEN = -shifted_e_count; 
      bcopy(((char *)shifted_e) + e_last_index, ((char *)shifted_e) + e_last_index + shifted_e_count, shifted_e_len); 
      memset(((char *)shifted_e) + e_first_index + shifted_e_count, DECIMAL_EOF_BYTE, DELTA_LEN); 
    }; 
  };
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_e);); 
  DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e = "); decimal__print_raw_ln_r(STDERR_FILENO, decimal_env, &shifted_e);); 
  
  //assert(false); 
  
  // Now, we gonna compute once and for all all the 100-digit multiples of 'shifted_e'. 
  decimal_t shifted_e_digit_tab[DECIMAL_BASE]; 
  //decimal_t shifted_e_digit_tab[DECIMAL_BASE + 1]; // «+1», as DECIMAL_BASE must be included, as 'd' could exactly be equal to 'e x DECIMAL_BASE'. Such is the case of '1 / 100', or '1 / BASE'. 
  //for (int i = 0; i < (int)ARRAY_SIZE(shifted_e_digit_tab); i++) { 
  for (int i = 0; i < DECIMAL_BASE; i++) { 
    bcopy(shifted_e, shifted_e_digit_tab[i], DECIMAL_SIZE); 
  }; 
  const int f_base = shifted_e_last_index; 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "f_base: "); dputn(STDERR_FILENO, f_base); write_eol(STDERR_FILENO);); 
  shifted_e_digit_tab[0][0] = DECIMAL_STATUS__ZERO; 
  for (uint16_t i = 2; i < DECIMAL_BASE; i++) { 
    DEBUG_STATEMENT(1000,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "i: "); dputn(STDERR_FILENO, i); write_eol(STDERR_FILENO);); 
    uint8_t * f = &(shifted_e_digit_tab[i][0]); 
    int f_index = f_base; 
    uint16_t f_retenue = 0; 
    for (;;) { 
      DEBUG_STATEMENT(1000,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "f_index  : "); dputn(STDERR_FILENO, f_index  ); write_eol(STDERR_FILENO);); 
      DEBUG_STATEMENT(1000,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "f_retenue: "); dputn(STDERR_FILENO, f_retenue); write_eol(STDERR_FILENO);); 
      const uint16_t f_v = *(f + f_index); 
      if (f_v == DECIMAL_EOF_BYTE) { 
	if (f_retenue != 0) *(f + f_index) = f_retenue; 
	break; 
      }; 
      const uint16_t m_v = f_v * i + f_retenue; 
      *(f + f_index) = m_v % 100; 
      f_retenue = m_v / 100; 
      f_index++; 
      if (f_index == DECIMAL_SIZE) { if (f_retenue != 0) { assert(false); goto label__e_is_pos_infinity; }; break; }; 
    }; 
    f_index = f_base; 
    for (;;) { 
      if (0 != *(f + f_index)) break; 
      *(f + f_index) = DECIMAL_EOF_BYTE; 
      f_index++; 
      if (f_index == DECIMAL_SIZE) goto label__error__internal; 
    }; 
    f_index = DECIMAL_SIZE; 
    for (;;) { 
      f_index--; 
      if (f_index == 0) goto label__error__internal; 
      if (DECIMAL_EOF_BYTE == *(f + f_index)) continue; 
      if (0 != *(f + f_index)) break; 
      *(f + f_index) = DECIMAL_EOF_BYTE; 
    }; 
    DEBUG_STATEMENT(100,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_digit_tab["); dputn(STDERR_FILENO, i); write_string(STDERR_FILENO, "] = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_e_digit_tab[i]);); 
    //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_digit_tab[i] = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_e_digit_tab[i]);); 
    //DEBUG_STATEMENT(1000,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "shifted_e_digit_tab[i] = "); decimal__print_raw_r(STDERR_FILENO, &shifted_e_digit_tab[i]); write_eol(STDERR_FILENO);); 
  }; 
  
  // For early starting and early stopping, we compute two helpful indices. 
  // NB:  99 x 01 00 99 = 99 98 01 -> the same number of digits! So lookedup_index_max could be 100. 
  int lookedup_index_max = 0; 
  for (;;) { 
    lookedup_index_max++; 
    if (lookedup_index_max == DECIMAL_BASE) break; 
    const uint8_t * f = &(shifted_e_digit_tab[lookedup_index_max][0]); 
    if (*(f + shifted_e_first_index + 1) == DECIMAL_EOF_BYTE) { continue; }; 
    if (*(f + shifted_e_first_index + 1) == 0) continue; 
    break; 
  }; 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "lookedup_index_max: "); dputn(STDERR_FILENO, lookedup_index_max); write_eol(STDERR_FILENO);); 
  
  //assert(false); 
  
  int lookedup_index_max2 = DECIMAL_BASE; //DECIMAL_BASE + 1; //DECIMAL_BASE; //100; //lookedup_index_max - 1; 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "lookedup_index_max2: "); dputn(STDERR_FILENO, lookedup_index_max2); write_eol(STDERR_FILENO);); 
  
  //uint8_t c_digits[DECIMAL_SIZE]; 
  uint8_t * c_digits = *(c_r); 
  int c_index = DECIMAL_SIZE - 1; 
  //decimal_t dividende; 
  //bcopy(d, dividende, DECIMAL_SIZE); 
  //uint8_t * g = &(dividende[0]); 
  uint8_t * g = &(shifted_d[0]); 

  // Now, the actual computation 
  for (;;) { 
    // First, we compute the quotient digit in looking for digit-multiple of 'shifted_e' that is lower or equal than 'shifted_d'. 
    int lookup_index; 
    { 
      const uint8_t g_top_digit = *(g + DECIMAL_SIZE - 1); 
      if ((g_top_digit != DECIMAL_EOF_BYTE) && (g_top_digit != 0)) { 
	//if (DECIMAL_BASE == lookedup_index_max) { looked_index = 99; goto label__lookup_index__found; } // It does happen:  99 x 01_00_99 = 99_98_01 -> the same number of digits! 
	lookup_index = lookedup_index_max; 
	for (;;) { 
	  if (lookedup_index_max2 == lookup_index) { break; } 
	  const uint8_t * f = &(shifted_e_digit_tab[lookup_index][0]); 
	  int greater_or_equal_huh = false; 
	  { 
	    int g_index = DECIMAL_SIZE - 1; 
	    int f_index = DECIMAL_SIZE - 1; 
	    for (;;) { 
	      const uint8_t g_v = *(g + g_index); 
	      const uint8_t f_v = *(f + f_index); 
	      if (f_v == DECIMAL_EOF_BYTE) { if (g_v == DECIMAL_EOF_BYTE) { lookup_index++; greater_or_equal_huh = true; }; break; }; 
	      if (g_v == DECIMAL_EOF_BYTE) { greater_or_equal_huh = true; break; }; 
	      if (g_v > f_v) break; 
	      if (g_v < f_v) { greater_or_equal_huh = true; break; }; 
	      g_index--; 
	      f_index--; 
	      if (g_index == 0) { lookup_index++; greater_or_equal_huh = true; break; }; 
	    }; 
	  }; 
	  if (greater_or_equal_huh) break; 
	  lookup_index++; 
	  //if (lookup_index == lookedup_index_max2) break; 
	}; 
	lookup_index--; 
      } 
      else { 
	const uint8_t g_second_digit = *(g + DECIMAL_SIZE - 2); 
	if ((g_second_digit != DECIMAL_EOF_BYTE) && (g_second_digit != 0)) { 
	  lookup_index = 1; 
	  for (;;) { 
	    if (lookedup_index_max == lookup_index) { break; } 
	    const uint8_t * f = &(shifted_e_digit_tab[lookup_index][0]); 
	    int greater_or_equal_huh = false; 
	    { 
	      int g_index = DECIMAL_SIZE - 2; 
	      int f_index = DECIMAL_SIZE - 2; 
	      for (;;) { 
		const uint8_t g_v = *(g + g_index); 
		const uint8_t f_v = *(f + f_index); 
		if (f_v == DECIMAL_EOF_BYTE) { if (g_v == DECIMAL_EOF_BYTE) { lookup_index++; greater_or_equal_huh = true; }; break; }; 
		if (g_v == DECIMAL_EOF_BYTE) { greater_or_equal_huh = true; break; }; 
		if (g_v > f_v) break; 
		if (g_v < f_v) { greater_or_equal_huh = true; break; }; 
		g_index--; 
		f_index--; 
		if (g_index == 0) { lookup_index++; greater_or_equal_huh = true; break; }; 
	      }; 
	    };
	    if (greater_or_equal_huh) break; 
	    lookup_index++; 
	    //if (lookup_index == lookedup_index_max) break; 
	  }; 
	  lookup_index--; 
	}
	else { 
	  lookup_index = 0; 
	}; 
      }; 
    }; 
  //label__lookup_index__found:
    // Quotient digit got computed in 'lookup_index'. 
    //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "dividende = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &dividende);); 
    //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "lookup_index: "); dputn(STDERR_FILENO, lookup_index); write_eol(STDERR_FILENO);); 
    
    //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "c_index: "); dputn(STDERR_FILENO, c_index); write_eol(STDERR_FILENO);); 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] --> NEW LOOP: "); write_string(STDERR_FILENO, "c_digits[c_index] = lookup_index : "); dputs_array(STDERR_FILENO, "c_digits[", int_string__stack(c_index), "] = ", int_string__stack(lookup_index)); write_eol(STDERR_FILENO);); 
    c_digits[c_index] = lookup_index; 
    c_index--; 
    //if (c_index == 239) break; 
    if (c_index == 0) break; 
    
    // Now, to move forward in the computation, 
    // we have to substract the digit-multiple of 'shifted_e' to 'shifted_d'. 
    if (lookup_index > 0) { 
      const uint8_t * f = &(shifted_e_digit_tab[lookup_index][0]); 
      DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] SUBSTRACT: "); write_string(STDERR_FILENO, "shifted_e_digit_tab[lookup_index] = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &(shifted_e_digit_tab[lookup_index]));); 
      int fg_index = f_base; 
      //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] SUBSTRACT: "); write_string(STDERR_FILENO, "f_base = "); dputn(STDERR_FILENO, f_base); write_eol(STDERR_FILENO);); 
      for (;;) { 
	const uint8_t f_v = *(f + fg_index); 
	if (f_v != DECIMAL_EOF_BYTE) break; 
	fg_index++; 
	if (fg_index == DECIMAL_SIZE) goto label__error__malformed_number; 
      }; 
      //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "fg_index = "); dputn(STDERR_FILENO, fg_index); write_eol(STDERR_FILENO);); 
      fg_index--; 
      uint8_t retenue = 0; 
      for (;;) { 
	fg_index++; 
	//DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "fg_index = "); dputn(STDERR_FILENO, fg_index); write_eol(STDERR_FILENO);); 
	if (fg_index == DECIMAL_SIZE) { if (0 != retenue) { goto label__error__internal; }; break; }; 
	const uint8_t g_v = *(g + fg_index); 
	const uint8_t f_v = *(f + fg_index); 
	DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] SUBSTRACT: "); write_string(STDERR_FILENO, "g_v | f_v | retenue = "); dputn(STDERR_FILENO, g_v); write_string(STDERR_FILENO, " | "); dputn(STDERR_FILENO, f_v); write_string(STDERR_FILENO, " | "); dputn(STDERR_FILENO, retenue); write_eol(STDERR_FILENO);); 
	if (f_v == DECIMAL_EOF_BYTE) { 
	  if (0 == retenue) break; 
	  if (g_v == DECIMAL_EOF_BYTE) goto label__error__internal; 
	  if (g_v > 0) { (*(g + fg_index)) --; break; }; 
	  if (*(g + fg_index + 1) == DECIMAL_EOF_BYTE) goto label__error__internal; 
	  if (*(g + fg_index + 1) == 0) goto label__error__internal; 
	  (*(g + fg_index + 1)) --; 
	  break; 
	}; 
	if (g_v == DECIMAL_EOF_BYTE) { 
	  // Could happen in the decimal part of 'g'. 
	  *(g + fg_index) = 100 - f_v - retenue; 
	  retenue = 1; 
	  continue; 
	}; 
	const uint8_t greater_huh = (g_v < (f_v + retenue)); 
	*(g + fg_index) += -f_v - retenue + (greater_huh ? 100 : 0); 
	retenue = (greater_huh ? 1 : 0); 
      }; 
      DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] POST SUBSTRACT: "); write_string(STDERR_FILENO, "dividende = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_d);); 
      
      // The substraction could have led to leading zeroes in 'g'; so removing them. 
      { 
	int g_index = DECIMAL_SIZE; 
	for (;;) { 
	  g_index--; 
	  if (g_index == 0) break; // Possible in case of 'g' being null. 
	  const uint8_t g_v = *(g + g_index); 
	  if (DECIMAL_EOF_BYTE == g_v) continue; 
	  if (0 == g_v) { 
	    *(g + g_index) = DECIMAL_EOF_BYTE; 
	    continue; 
	  }; 
	  break; 
	}; 
      }; 
    }; // substraction completed 
    DEBUG_STATEMENT(10,write_string(STDERR_FILENO, "[DEBUG] POST NORMALIZATION: "); write_string(STDERR_FILENO, "dividende = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_d);); 
    
    // Before doing anything, checking whether 'g' is null, meaning that there's nothing left to be done. 
    { 
      int g_index = 0; 
      int is_zero_huh = true; 
      for (;;) { 
	g_index++; 
	if (g_index == DECIMAL_SIZE) break; 
	const uint8_t g_v = *(g + g_index); 
	if (g_v == DECIMAL_EOF_BYTE) continue; 
	if (g_v == 0) continue; 
	is_zero_huh = false; 
	break; 
      }; 
      if (is_zero_huh) break; 
    }; 
    
    // shifting 'dividende' by one digit 
    { 
      bcopy(g + 1, g + 2, DECIMAL_SIZE - 2); 
      *(g + 1) = DECIMAL_EOF_BYTE; 
    }; 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] POST SHIFTING: "); write_string(STDERR_FILENO, "dividende = "); decimal__print_debug_ln_r(STDERR_FILENO, decimal_env, &shifted_d);); 

    // Iterating on finding the next digit. 
  }; 
  // DONE! 
  
  // Either we reached the end of 'c', either 'shifted_e' was an exact multiple of 'shifted_d'. 
  
  const uint8_t c_len = DECIMAL_SIZE - 1 - c_index; 
  DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "c_len: "); dputn(STDERR_FILENO, c_len); write_eol(STDERR_FILENO);); 
  
  // Writing the result into 'd' 
  *d = same_sign_huh ? DECIMAL_STATUS__POS : DECIMAL_STATUS__NEG; 
  const uint8_t c_N_index = c_N + DECIMAL_FIXED_POINT_INDEX; 
  if (normalize_c_huh) { 
#if 0 
    if (0 == c_N) { 
      *c_digits = same_sign_huh ? 1 : -1; 
    } 
    else { 
      *c_digits = same_sign_huh ? c_N : -c_N; 
    }; 
#else 
    *c_digits = *d; 
    if (NULL != c_N_ref) { *c_N_ref = c_N; }; 
#endif 
    for (int i = 1; i <= c_index; i++) { 
      c_digits[i] = 0; 
    }; 
    //quotient__print_ln_r(STDERR_FILENO, (decimal_t *)(c_digits), c_N); 
  }; 
  { 
    int d_index = DECIMAL_SIZE; 
    for (;;) { 
      d_index--; 
      if (d_index == c_N_index) break; 
      *(d + d_index) = DECIMAL_EOF_BYTE; 
    }; 
    const uint8_t * c = c_digits + DECIMAL_SIZE - 1; 
    for (int i = 0; i < c_len; i++) { 
      *(d + d_index) = *c; 
      c--; 
      d_index--; 
      if (d_index == 0) break; 
    }; 
    for (;;) { 
      if (d_index < DECIMAL_FIXED_POINT_INDEX) break; 
      *(d + d_index) = 0; 
      d_index--; 
    }; 
    for (;;) { 
      if (d_index == 0) break; 
      *(d + d_index) = DECIMAL_EOF_BYTE; 
      d_index--; 
    }; 
    d_index = c_N_index; 
    for (;;) { 
      d_index++; 
      if (d_index > DECIMAL_FIXED_POINT_INDEX) break; 
      if (*(d + d_index) != DECIMAL_EOF_BYTE) continue; 
      *(d + d_index) = 0; 
    }; 
  }; 
  //DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] "); write_string(STDERR_FILENO, "d_r = "); decimal__print_raw_r(STDERR_FILENO, d_r); write_eol(STDERR_FILENO);); 
  
  // DONE 
  goto label__exit; 
  
  
  
  assert(false); 
  
  
 label__e_is_pos_infinity: { 
    *d = DECIMAL_STATUS__POS_EPSILON; 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] EXIT: "); write_string(STDERR_FILENO, "DECIMAL_STATUS__POS_EPSILON"); write_eol(STDERR_FILENO);); 
    return DECIMAL__OK; 
  }; 
  
 label__exit: { 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] EXIT: "); write_string(STDERR_FILENO, "DECIMAL__OK"); write_eol(STDERR_FILENO);); 
    return DECIMAL__OK; 
  };
  
 label__error__malformed_number: { 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] EXIT: "); write_string(STDERR_FILENO, "DECIMAL__MALFORMED_NUMBER"); write_eol(STDERR_FILENO);); 
    return DECIMAL__MALFORMED_NUMBER; 
  }; 
  
 label__error__internal: { 
    DEBUG_STATEMENT(1,write_string(STDERR_FILENO, "[DEBUG] EXIT: "); write_string(STDERR_FILENO, "DECIMAL__INTERNAL_ERROR"); write_eol(STDERR_FILENO);); 
    return DECIMAL__INTERNAL_ERROR; 
  }; 
}; 



RETURN_TYPE_T decimal__div_r(decimal_env_t * decimal_env, decimal_t * d_r, const decimal_t * e_r) { 
  assert(d_r != e_r); // TODO XXX FIXME 
  decimal_t c; 
  return decimal__div_r__aux(decimal_env, d_r, e_r, &c, false, NULL); 
}; 





