int decimal__print_raw_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  int printed_nb = 0; 
  printed_nb += dputn(stduser_d, (*d_r)[DECIMAL_STATUS_INDEX]); 
  printed_nb += write_string(stduser_d, "["); 
  printed_nb += write_string(stduser_d, decimal_status__cstr((*d_r)[DECIMAL_STATUS_INDEX])); 
  printed_nb += write_string(stduser_d, "] { "); 
  for (int i = DECIMAL_DIGITS_INDEX; i < DECIMAL_SIZE; i++) { 
    printed_nb += dputn(stduser_d, (*d_r)[i]); 
    printed_nb += write_string(stduser_d, ", "); 
  }; 
  printed_nb += write_string(stduser_d, " } "); 
  return printed_nb; 
}; 

int decimal__print_raw_ln_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  const int printed_nb = decimal__print_raw_r(stduser_d, decimal_env, d_r); 
  write_eol(stduser_d); 
  return 1 + printed_nb; 
}; 


int decimal_mantisse__print_raw_r(const int stduser_d, decimal_env_t * decimal_env, const uint8_t * mantisse, const uint16_t mantisse_size) { 
  uint8_t buffer[4]; 
  int printed_nb = 0; 
  printed_nb += write_string(stduser_d, "["); 
  printed_nb += write_string(stduser_d, int_string_in_the_buffer(mantisse_size, sizeof(buffer), buffer)); 
  printed_nb += write_string(stduser_d, "]"); 
  printed_nb += write_string(stduser_d, "{ "); 
  for (int i = 0; i < mantisse_size; i++) { 
    //printed_nb += dputn(stduser_d, *(mantisse + i)); 
    //printed_nb += write_string(stduser_d, int_string_in_the_buffer(*(mantisse + i), sizeof(buffer), buffer)); 
    printed_nb += write_string(stduser_d, int_string_in_the_buffer(*(mantisse + mantisse_size - i - 1), sizeof(buffer), buffer)); 
    printed_nb += write_string(stduser_d, ", "); 
  }; 
  printed_nb += write_string(stduser_d, " } "); 
  return printed_nb; 
}; 

int decimal_mantisse__print_raw_ln_r(const int stduser_d, decimal_env_t * decimal_env, const uint8_t * mantisse, const uint16_t mantisse_size) { 
  const int printed_nb = decimal_mantisse__print_raw_r(stduser_d, decimal_env, mantisse, mantisse_size); 
  write_eol(stduser_d); 
  return 1 + printed_nb; 
}; 


static const char * base100_digit_no_leading_zeros_to_cstr[] = { 
   "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9", 
  "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
  "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", 
  "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", 
  "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", 
  "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", 
  "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", 
  "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", 
  "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", 
  "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"  
}; 

static const char * base100_digit_to_cstr[] = { 
  "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", 
  "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
  "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", 
  "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", 
  "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", 
  "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", 
  "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", 
  "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", 
  "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", 
  "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"  
}; 

static const char * base100_digit_no_trailing_zeros_to_cstr[] = { 
  "", "01", "02", "03", "04", "05", "06", "07", "08", "09", 
  "1", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
  "2", "21", "22", "23", "24", "25", "26", "27", "28", "29", 
  "3", "31", "32", "33", "34", "35", "36", "37", "38", "39", 
  "4", "41", "42", "43", "44", "45", "46", "47", "48", "49", 
  "5", "51", "52", "53", "54", "55", "56", "57", "58", "59", 
  "6", "61", "62", "63", "64", "65", "66", "67", "68", "69", 
  "7", "71", "72", "73", "74", "75", "76", "77", "78", "79", 
  "8", "81", "82", "83", "84", "85", "86", "87", "88", "89", 
  "9", "91", "92", "93", "94", "95", "96", "97", "98", "99"  
}; 


static const char * decimal_print__status_cstr(decimal_env_t * decimal_env, const uint8_t status) { 
  const char * status_cstr = NULL; 
  switch (status) { 
  case DECIMAL_STATUS__INVALID       : status_cstr = "INVALID"; break; 
  case DECIMAL_STATUS__ZERO          : status_cstr = "0"; break; 
  case DECIMAL_STATUS__INFINI        : status_cstr = "inf"; break; 
  case DECIMAL_STATUS__POS           : status_cstr = ""; break; 
  case DECIMAL_STATUS__NEG           : status_cstr = ""; break; 
  case DECIMAL_STATUS__POS_INFINI    : status_cstr = "+inf"; break; 
  case DECIMAL_STATUS__NEG_INFINI    : status_cstr = "-inf"; break; 
  case DECIMAL_STATUS__POS_EPSILON   : status_cstr = "+epsilon"; break; 
  case DECIMAL_STATUS__NEG_EPSILON   : status_cstr = "-epsilon"; break; 
  case DECIMAL_STATUS__DEVELOPPEMENT_LIMITE_NECESSAIRE: status_cstr = "DEVELOPPEMENT_LIMITE_NECESSAIRE"; break; 
#if 0 
  case DECIMAL_STATUS__0_DIV_BY_0    : status_cstr = "0_DIVIDED_BY_0"; break; 
  case DECIMAL_STATUS__INF_DIV_BY_INF: status_cstr = "INF_DIVIDE_BY_INF"; break; 
  case DECIMAL_STATUS__ZERO_BY_INF   : status_cstr = "ZERO_BY_INF"; break; 
  case DECIMAL_STATUS__INF_BY_ZERO   : status_cstr = "INF_BY_ZERO"; break; 
#endif 
  default: goto error_label__unlisted_status; 
  }; 
  return status_cstr; 

  error_label__unlisted_status: { 
    const char * cstr = decimal_status__cstr(status); 
    decimal_env -> error_id = DECIMAL__STATUS_NOT_LISTED_IN_SWITCH; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Status not listed in switch: %d [%s]", ((int)status), cstr); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
    //return decimal_env -> error_id; 
    return NULL; 
  }; 
}; 

int decimal__print_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  if (stduser_d <= 0) goto error_label__stduser_not_pos; 
  const uint8_t status = (*d_r)[DECIMAL_STATUS_INDEX]; 
  //decimal_status__value_is_a_status_huh(const uint8_t status); 
  const char * status_cstr = decimal_print__status_cstr(decimal_env, status); 
  if (NULL == status_cstr) goto error_label__not_listed_status; 
  if ('\0' != *status_cstr) { 
    return write_string(stduser_d, status_cstr); 
  }; 
  
  int printed_bytes_nb = 0; 
  int index = DECIMAL_FIXED_POINT_INDEX; //1 + DECIMAL_FIXED_POINT_SIZE; //DECIMAL_SIZE - 1; 
  for (;;) { 
    index++; 
    if (index == DECIMAL_SIZE) break; 
    if ((*d_r)[index] == DECIMAL_EOF_BYTE) break; 
  }; 
  index--; 
  if (status == DECIMAL_STATUS__NEG) printed_bytes_nb += write(stduser_d, "-", 1); 
  uint8_t c; 
  c = (*d_r)[index]; 
  if (c >= 100) goto error_label__malformed_number; 
  printed_bytes_nb += write_string(stduser_d, base100_digit_no_leading_zeros_to_cstr[c]); 
  for (;;) { 
    index--; 
    if (index < DECIMAL_FIXED_POINT_INDEX) break; 
    c = (*d_r)[index]; 
    if (c >= 100) goto error_label__malformed_number; 
    printed_bytes_nb += write_string(stduser_d, base100_digit_to_cstr[c]); 
  }; 
  
  c = (*d_r)[index]; 
  if (c == DECIMAL_EOF_BYTE) goto label__exit; 
  printed_bytes_nb += write(stduser_d, ".", 1); 
  for (;;) { 
    const char * * c_cstr_array; 
    if (index == DECIMAL_DIGITS_INDEX) { 
      c_cstr_array = base100_digit_no_trailing_zeros_to_cstr; 
      //printed_bytes_nb += write_string(stduser_d, base100_digit_no_trailing_zeros_to_cstr[c]); 
    } 
    else if ((*d_r)[index-1] == DECIMAL_EOF_BYTE) { 
      c_cstr_array = base100_digit_no_trailing_zeros_to_cstr; 
      //printed_bytes_nb += write_string(stduser_d, base100_digit_no_trailing_zeros_to_cstr[c]); 
    }
    else { 
      c_cstr_array = base100_digit_to_cstr; 
      //printed_bytes_nb += write_string(stduser_d, base100_digit_to_cstr[c]); 
    }; 
    const char * c_cstr = c_cstr_array[c]; 
    printed_bytes_nb += write_string(stduser_d, c_cstr); 
    index--; 
    if (index < DECIMAL_DIGITS_INDEX) break;  
    c = (*d_r)[index]; 
    if (c == DECIMAL_EOF_BYTE) return DECIMAL__OK; 
    if (c >= 100) goto error_label__malformed_number; 
  }; 
  
  goto label__exit; 

  assert(false); 

 label__exit: { 
    return printed_bytes_nb; 
  }; 
  
 error_label__malformed_number: { 
    decimal_env -> error_id = DECIMAL__MALFORMED_NUMBER; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Malformed number: index = %d â€” char = %u", (int)index, ((unsigned int)c)); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
    printed_bytes_nb += write_string(stduser_d, "<malformed number>"); 
    return printed_bytes_nb; 
  }; 

 error_label__stduser_not_pos: { 
    decimal_env -> error_id = DECIMAL__STDUSER_NOT_POS; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "stduser_d is not positive: stduser_d = %d", (int)stduser_d); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
    return -1; 
  }; 

  error_label__not_listed_status: { 
    return -1; 
  }; 
}; 


int decimal__print_ln_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  const int printed_bytes_nb = decimal__print_r(stduser_d, decimal_env, d_r); 
  if (-1 == printed_bytes_nb) return -1; 
  write_eol(stduser_d); 
  return 1 + printed_bytes_nb; 
}; 



static int decimal__print_debug_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  if (stduser_d <= 0) goto error_label__stduser_not_pos; 
  const uint8_t status = (*d_r)[DECIMAL_STATUS_INDEX]; 
  const char *  status_cstr = decimal_print__status_cstr(decimal_env, status); 
  if (NULL == status_cstr) goto error_label__not_listed_status; 
  if ('\0' != *status_cstr) { 
    return write_string(stduser_d, status_cstr); 
  }; 
  
  int printed_bytes_nb = 0; 
  
  if (status == DECIMAL_STATUS__NEG) printed_bytes_nb += write(stduser_d, "-", 1); 
  
  int index = DECIMAL_SIZE; 
  for (;;) { 
    index--; 
    if (DECIMAL_DIGITS_INDEX > index) break; 
    if ((*d_r)[index] != DECIMAL_EOF_BYTE) break; 
  }; 
  
  if (DECIMAL_DIGITS_INDEX > index) { 
    printed_bytes_nb += write_string(stduser_d, "<empty>"); 
    goto label__exit; 
  }; 
  
  { 
    for (;;) { 
      const uint8_t c = (*d_r)[index]; 
      if (c == DECIMAL_EOF_BYTE) break; 
      if (c >= 100) { printed_bytes_nb += write_string(stduser_d, "<"); printed_bytes_nb += dputn(stduser_d, c); printed_bytes_nb += write_string(stduser_d, ">"); }  
      else { printed_bytes_nb += write_string(stduser_d, base100_digit_to_cstr[c]); }; 
      index--; 
      if (DECIMAL_DIGITS_INDEX > index) break; 
    }; 
    index++; 
    //{ write_string(stduser_d, "["); dputn(stduser_d, index - DECIMAL_FIXED_POINT_SIZE); write_string(stduser_d, "]"); }; 
    { printed_bytes_nb += write_string(stduser_d, "["); printed_bytes_nb += dputn(stduser_d, index); printed_bytes_nb += write_string(stduser_d, "]"); }; 
    goto label__exit; 
  }; 

  assert(false); 

 label__exit: { 
    return printed_bytes_nb; 
  }; 

 error_label__malformed_number: { 
    decimal_env -> error_id = DECIMAL__MALFORMED_NUMBER; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "Malformed number: index = %d â€” char = %u", (int)index, ((unsigned int)(*d_r)[index])); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
    printed_bytes_nb += write_string(stduser_d, "<malformed number>"); 
    return printed_bytes_nb; 
  }; 

 error_label__stduser_not_pos: { 
    decimal_env -> error_id = DECIMAL__STDUSER_NOT_POS; 
    snprintf(decimal_env -> error_str, DECIMAL_ENV__ERROR_BUFFER_SIZE, "stduser_d is not positive: stduser_d = %d", (int)stduser_d); 
    if (decimal_env -> stdlog_d > 0) { dprintf(decimal_env -> stdlog_d, "{" __FILE__ ":" STRINGIFY(__LINE__) ":<%s()>}: Error: " "%s" "\n", __func__, decimal_env -> error_str); }; 
    return -1; 
  }; 

  error_label__not_listed_status: { 
    return -1; 
  }; 
}; 

int decimal__print_debug_ln_r(const int stduser_d, decimal_env_t * decimal_env, const decimal_t * d_r) { 
  const int printed_bytes_nb = decimal__print_debug_r(stduser_d, decimal_env, d_r); 
  if (-1 == printed_bytes_nb) return -1; 
  write_eol(stduser_d); 
  return 1 + printed_bytes_nb; 
}; 



